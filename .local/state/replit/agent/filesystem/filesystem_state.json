{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# JEE Aspirant Task Management App\n\n## Project Overview\nA feature-rich, animated task management app designed specifically for JEE aspirants. The app helps students organize their study time with subject-wise task management, important links, and time tracking capabilities.\n\n## Key Features\n- Subject-wise task organization\n- Time tracking and management\n- Important links section\n- Responsive design with animations\n- Local storage for data persistence\n- Modern UI with dark/light themes\n\n## Project Architecture\n- **Frontend**: React with Vite, TypeScript, Tailwind CSS, shadcn/ui\n- **Backend**: Express.js with in-memory storage (MemStorage)\n- **Data Storage**: Local storage for persistence\n- **Routing**: Wouter for client-side routing\n- **State Management**: TanStack Query for server state\n- **Forms**: React Hook Form with Zod validation\n- **Styling**: Tailwind CSS with custom animations\n\n## User Preferences\n- Data should be stored in local storage\n- Wants a stylish, animated, and responsive design\n- Requires features for JEE aspirants specifically\n- User name should be collected and stored locally\n- Personalized experience with user's name throughout the app\n\n## Recent Changes\n- Initial project setup (August 26, 2025)\n- Created comprehensive data model for tasks, subjects, and links\n- Implemented local storage persistence\n- Added tabbed interface with separate sections (August 26, 2025):\n  - Dashboard: Overview with stats, subject progress, and quick actions\n  - Tasks: Full task management with filtering and search\n  - Subjects: Subject-wise progress tracking and task organization\n  - Resources: Study material links and resource management\n  - Timer: Study timer with presets and session tracking\n- Added user profile system with welcome modal (August 26, 2025):\n  - Collects user's real name on first visit\n  - Stores user preferences in local storage\n  - Personalizes dashboard and timer with user's name\n  - User profile management with preferences\n- Added theme system with dark/light mode toggle (August 26, 2025):\n  - Theme provider with localStorage persistence\n  - Theme toggle button in header\n  - Full dark mode support with proper color schemes\n  - Enhanced responsive design across all components\n  - Improved styling with semantic color tokens\n- Enhanced UI with icons and animations (August 26, 2025):\n  - Replaced all emojis with proper Lucide React icons for better visual consistency\n  - Added smooth hover animations and transitions throughout the app\n  - Enhanced progress cards with gradient overlays and interactive effects\n  - Improved header with backdrop blur and animated elements\n  - Added comprehensive keyframe animations for better user experience\n  - Enhanced tab navigation with scale and transform effects\n- Fixed resources functionality with local storage and custom popups (August 26, 2025):\n  - Implemented full CRUD operations for resources with local storage persistence\n  - Created custom ConfirmationDialog component for deletion confirmations\n  - Fixed popup/modal issues with proper state management\n  - Enhanced resource management with user-friendly confirmation dialogs\n  - Improved theme consistency throughout the resources section\n  - Added proper toast notifications for user feedback\n- Made all modals fully responsive for mobile devices (August 26, 2025):\n  - Updated SimpleModal base component with responsive breakpoints\n  - Enhanced all form modals (task, resource, welcome, confirmation) for mobile-first design\n  - Added responsive typography, spacing, and button layouts\n  - Implemented stacked button layouts on mobile, side-by-side on desktop\n  - Enhanced touch-friendly interactions and proper viewport sizing\n  - Removed test modal buttons and cleaned up debugging components","size_bytes":3761},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        // JEE App specific colors\n        'jee-primary': 'var(--jee-primary)',\n        'jee-secondary': 'var(--jee-secondary)',\n        'jee-accent': 'var(--jee-accent)',\n        'jee-muted': 'var(--jee-muted)',\n        // Subject colors\n        'physics': 'var(--physics-color)',\n        'chemistry': 'var(--chemistry-color)',\n        'mathematics': 'var(--mathematics-color)',\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n        inter: ['Inter', 'sans-serif'],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        float: {\n          '0%, 100%': { transform: 'translateY(0px)' },\n          '50%': { transform: 'translateY(-10px)' },\n        },\n        'pulse-soft': {\n          '0%, 100%': { opacity: '1' },\n          '50%': { opacity: '0.7' },\n        },\n        'slide-up': {\n          '0%': { transform: 'translateY(10px)', opacity: '0' },\n          '100%': { transform: 'translateY(0px)', opacity: '1' },\n        },\n        'fade-in': {\n          '0%': { opacity: '0' },\n          '100%': { opacity: '1' },\n        },\n        'scale-in': {\n          '0%': { transform: 'scale(0.95)', opacity: '0' },\n          '100%': { transform: 'scale(1)', opacity: '1' },\n        },\n        'slide-down': {\n          '0%': { transform: 'translateY(-20px)', opacity: '0' },\n          '100%': { transform: 'translateY(0px)', opacity: '1' },\n        },\n        'modal-enter': {\n          '0%': { \n            transform: 'scale(0.9) translateY(-20px)', \n            opacity: '0',\n            filter: 'blur(4px)'\n          },\n          '100%': { \n            transform: 'scale(1) translateY(0px)', \n            opacity: '1',\n            filter: 'blur(0px)'\n          },\n        },\n        'overlay-enter': {\n          '0%': { opacity: '0' },\n          '100%': { opacity: '1' },\n        },\n        'shimmer': {\n          '0%': { transform: 'translateX(-100%)' },\n          '100%': { transform: 'translateX(100%)' },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        'float': 'float 3s ease-in-out infinite',\n        'pulse-soft': 'pulse-soft 2s ease-in-out infinite',\n        'slide-up': 'slide-up 0.3s ease-out',\n        'fade-in': 'fade-in 0.5s ease-out',\n        'scale-in': 'scale-in 0.2s ease-out',\n        'slide-down': 'slide-down 0.3s ease-out',\n        'modal-enter': 'modal-enter 0.4s cubic-bezier(0.16, 1, 0.3, 1)',\n        'overlay-enter': 'overlay-enter 0.3s ease-out',\n        'shimmer': 'shimmer 2s infinite linear',\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":5065},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // put application routes here\n  // prefix all routes with /api\n\n  // use storage to perform CRUD operations on the storage interface\n  // e.g. storage.insertUser(user) or storage.getUserByUsername(username)\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":473},"server/storage.ts":{"content":"// Remove unused imports - this app uses local storage, not server storage\nimport { randomUUID } from \"crypto\";\n\n// modify the interface with any CRUD methods\n// you might need\n\n// This app uses local storage for persistence\n// Server storage is not used in this implementation\nexport interface IStorage {\n  // Placeholder interface - not used\n}\n\nexport class MemStorage implements IStorage {\n  constructor() {\n    // Placeholder class - not used\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":495},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { z } from \"zod\";\n\n// Task Schema\nexport const taskSchema = z.object({\n  id: z.string(),\n  title: z.string().min(1, \"Task title is required\"),\n  subject: z.enum([\"Physics\", \"Chemistry\", \"Mathematics\"]),\n  description: z.string().optional(),\n  priority: z.enum([\"high\", \"medium\", \"low\"]),\n  status: z.enum([\"pending\", \"in-progress\", \"completed\", \"overdue\"]),\n  dueDate: z.string(),\n  createdAt: z.string(),\n  completedAt: z.string().optional(),\n  estimatedTime: z.number().optional(), // in minutes\n  actualTime: z.number().optional(), // in minutes\n});\n\nexport const insertTaskSchema = taskSchema.omit({\n  id: true,\n  createdAt: true,\n  completedAt: true,\n  status: true,\n});\n\n// Resource Schema\nexport const resourceSchema = z.object({\n  id: z.string(),\n  title: z.string().min(1, \"Resource title is required\"),\n  url: z.string().url(\"Please enter a valid URL\"),\n  description: z.string().optional(),\n  subject: z.enum([\"Physics\", \"Chemistry\", \"Mathematics\", \"General\"]),\n  category: z.enum([\"video\", \"book\", \"pdf\", \"website\", \"tool\"]),\n  createdAt: z.string(),\n});\n\nexport const insertResourceSchema = resourceSchema.omit({\n  id: true,\n  createdAt: true,\n});\n\n// Study Session Schema\nexport const studySessionSchema = z.object({\n  id: z.string(),\n  subject: z.enum([\"Physics\", \"Chemistry\", \"Mathematics\"]),\n  duration: z.number(), // in minutes\n  startTime: z.string(),\n  endTime: z.string(),\n  taskId: z.string().optional(),\n  notes: z.string().optional(),\n});\n\nexport const insertStudySessionSchema = studySessionSchema.omit({\n  id: true,\n});\n\n// Schedule Item Schema\nexport const scheduleItemSchema = z.object({\n  id: z.string(),\n  title: z.string().min(1, \"Schedule item title is required\"),\n  subject: z.enum([\"Physics\", \"Chemistry\", \"Mathematics\"]),\n  startTime: z.string(),\n  endTime: z.string(),\n  date: z.string(),\n  type: z.enum([\"study\", \"test\", \"revision\", \"break\"]),\n  completed: z.boolean().default(false),\n});\n\nexport const insertScheduleItemSchema = scheduleItemSchema.omit({\n  id: true,\n  completed: true,\n});\n\n// Activity Schema\nexport const activitySchema = z.object({\n  id: z.string(),\n  type: z.enum([\"task_completed\", \"study_session\", \"task_created\", \"resource_added\"]),\n  description: z.string(),\n  subject: z.enum([\"Physics\", \"Chemistry\", \"Mathematics\"]).optional(),\n  timestamp: z.string(),\n  metadata: z.record(z.any()).optional(),\n});\n\n// User Stats Schema\nexport const userStatsSchema = z.object({\n  totalTasks: z.number().default(0),\n  completedTasks: z.number().default(0),\n  totalStudyTime: z.number().default(0), // in minutes\n  currentStreak: z.number().default(0),\n  lastStudyDate: z.string().optional(),\n  subjectProgress: z.object({\n    Physics: z.number().default(0),\n    Chemistry: z.number().default(0),\n    Mathematics: z.number().default(0),\n  }).default({\n    Physics: 0,\n    Chemistry: 0,\n    Mathematics: 0,\n  }),\n});\n\n// Export types\nexport type Task = z.infer<typeof taskSchema>;\nexport type InsertTask = z.infer<typeof insertTaskSchema>;\nexport type Resource = z.infer<typeof resourceSchema>;\nexport type InsertResource = z.infer<typeof insertResourceSchema>;\nexport type StudySession = z.infer<typeof studySessionSchema>;\nexport type InsertStudySession = z.infer<typeof insertStudySessionSchema>;\nexport type ScheduleItem = z.infer<typeof scheduleItemSchema>;\nexport type InsertScheduleItem = z.infer<typeof insertScheduleItemSchema>;\nexport type Activity = z.infer<typeof activitySchema>;\nexport type UserStats = z.infer<typeof userStatsSchema>;\n\n// Subject type\nexport type Subject = \"Physics\" | \"Chemistry\" | \"Mathematics\";\n","size_bytes":3584},"client/src/App.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { ThemeProvider } from \"@/components/theme-provider\";\nimport { Header } from \"@/components/header\";\nimport { SimpleWelcomeModal } from \"@/components/new-modals/simple-welcome-modal\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Tasks from \"@/pages/tasks\";\nimport Subjects from \"@/pages/subjects\";\nimport Resources from \"@/pages/resources\";\nimport Timer from \"@/pages/timer\";\nimport Schedule from \"@/pages/schedule\";\nimport { initializeDefaultData, userProfileStorage, type UserProfile } from \"@/lib/storage\";\nimport { \n  LayoutDashboard, \n  CheckSquare, \n  BookOpen, \n  ExternalLink, \n  Clock,\n  Calendar\n} from \"lucide-react\";\n\nfunction App() {\n  const [activeTab, setActiveTab] = useState(\"dashboard\");\n  const [userProfile, setUserProfile] = useState<UserProfile | null>(null);\n  const [showWelcome, setShowWelcome] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Initialize app and check for user profile\n  useEffect(() => {\n    const initializeApp = () => {\n      // Check if this is a first-time user\n      const isFirstTime = userProfileStorage.isFirstTime();\n      const existingProfile = userProfileStorage.get();\n      \n      if (isFirstTime) {\n        setShowWelcome(true);\n      } else if (existingProfile) {\n        setUserProfile(existingProfile);\n        initializeDefaultData();\n      }\n      \n      setIsLoading(false);\n    };\n\n    initializeApp();\n  }, []);\n\n  const handleWelcomeComplete = (name: string) => {\n    console.log('handleWelcomeComplete called with name:', name);\n    try {\n      console.log('Creating user profile...');\n      const profile = userProfileStorage.create(name);\n      console.log('Profile created:', profile);\n      \n      console.log('Setting user profile...');\n      setUserProfile(profile);\n      \n      console.log('Setting showWelcome to false...');\n      setShowWelcome(false);\n      \n      console.log('Initializing default data...');\n      initializeDefaultData();\n      \n      console.log('Welcome setup complete');\n    } catch (error) {\n      console.error('Error in handleWelcomeComplete:', error);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <QueryClientProvider client={queryClient}>\n        <ThemeProvider defaultTheme=\"light\" storageKey=\"jee-ui-theme\">\n          <TooltipProvider>\n            <div className=\"min-h-screen bg-background font-inter flex items-center justify-center\">\n              <div className=\"text-center\">\n                <div className=\"w-16 h-16 bg-gradient-to-r from-jee-primary to-jee-accent rounded-full flex items-center justify-center mx-auto mb-4 animate-pulse\">\n                  <LayoutDashboard className=\"text-white\" size={32} />\n                </div>\n                <p className=\"text-muted-foreground\">Loading your study space...</p>\n              </div>\n            </div>\n            <Toaster />\n          </TooltipProvider>\n        </ThemeProvider>\n      </QueryClientProvider>\n    );\n  }\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider defaultTheme=\"light\" storageKey=\"jee-ui-theme\">\n        <TooltipProvider>\n        <div className=\"min-h-screen bg-gradient-to-br from-background via-background to-muted/20 text-foreground font-inter transition-all duration-500\">\n          <Header userProfile={userProfile} />\n          \n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n            <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n              {/* Tab Navigation */}\n              <div className=\"mb-8 animate-fade-in\">\n                <TabsList className=\"grid w-full max-w-4xl mx-auto grid-cols-6 place-items-center bg-card border border-border rounded-xl px-2 py-1 shadow-sm hover:shadow-lg transition-all duration-300 gap-1\">\n                  <TabsTrigger \n                    value=\"dashboard\" \n                    className=\"flex items-center justify-center sm:justify-start space-x-2 rounded-lg transition-all duration-500 data-[state=active]:bg-primary data-[state=active]:text-primary-foreground text-sm font-medium hover:scale-105\"\n                    data-testid=\"tab-dashboard\"\n                  >\n                    <LayoutDashboard size={16} className=\"transition-transform duration-300\" />\n                    <span className=\"hidden sm:inline\">Dashboard</span>\n                  </TabsTrigger>\n                  <TabsTrigger \n                    value=\"tasks\" \n                    className=\"flex items-center justify-center sm:justify-start space-x-2 rounded-lg transition-all duration-500 data-[state=active]:bg-primary data-[state=active]:text-primary-foreground text-sm font-medium hover:scale-105\"\n                    data-testid=\"tab-tasks\"\n                  >\n                    <CheckSquare size={16} className=\"transition-transform duration-300\" />\n                    <span className=\"hidden sm:inline\">Tasks</span>\n                  </TabsTrigger>\n                  <TabsTrigger \n                    value=\"subjects\" \n                    className=\"flex items-center justify-center sm:justify-start space-x-2 rounded-lg transition-all duration-500 data-[state=active]:bg-primary data-[state=active]:text-primary-foreground text-sm font-medium hover:scale-105\"\n                    data-testid=\"tab-subjects\"\n                  >\n                    <BookOpen size={16} className=\"transition-transform duration-300\" />\n                    <span className=\"hidden sm:inline\">Subjects</span>\n                  </TabsTrigger>\n                  <TabsTrigger \n                    value=\"resources\" \n                    className=\"flex items-center justify-center sm:justify-start space-x-2 rounded-lg transition-all duration-500 data-[state=active]:bg-primary data-[state=active]:text-primary-foreground text-sm font-medium hover:scale-105\"\n                    data-testid=\"tab-resources\"\n                  >\n                    <ExternalLink size={16} className=\"transition-transform duration-300\" />\n                    <span className=\"hidden sm:inline\">Resources</span>\n                  </TabsTrigger>\n                  <TabsTrigger \n                    value=\"timer\" \n                    className=\"flex items-center justify-center sm:justify-start space-x-2 rounded-lg transition-all duration-500 data-[state=active]:bg-primary data-[state=active]:text-primary-foreground text-sm font-medium hover:scale-105\"\n                    data-testid=\"tab-timer\"\n                  >\n                    <Clock size={16} className=\"transition-transform duration-300\" />\n                    <span className=\"hidden sm:inline\">Timer</span>\n                  </TabsTrigger>\n                  <TabsTrigger \n                    value=\"schedule\" \n                    className=\"flex items-center justify-center sm:justify-start space-x-2 rounded-lg transition-all duration-500 data-[state=active]:bg-primary data-[state=active]:text-primary-foreground text-sm font-medium hover:scale-105\"\n                    data-testid=\"tab-schedule\"\n                  >\n                    <Calendar size={16} className=\"transition-transform duration-300\" />\n                    <span className=\"hidden sm:inline\">Schedule</span>\n                  </TabsTrigger>\n                </TabsList>\n              </div>\n\n              {/* Tab Content */}\n              <TabsContent value=\"dashboard\" className=\"mt-0 animate-fade-in\">\n                <Dashboard userProfile={userProfile} />\n              </TabsContent>\n              \n              <TabsContent value=\"tasks\" className=\"mt-0 animate-fade-in\">\n                <Tasks />\n              </TabsContent>\n              \n              <TabsContent value=\"subjects\" className=\"mt-0 animate-fade-in\">\n                <Subjects />\n              </TabsContent>\n              \n              <TabsContent value=\"resources\" className=\"mt-0 animate-fade-in\">\n                <Resources />\n              </TabsContent>\n              \n              <TabsContent value=\"timer\" className=\"mt-0 animate-fade-in\">\n                <Timer userProfile={userProfile} />\n              </TabsContent>\n\n              <TabsContent value=\"schedule\" className=\"mt-0 animate-fade-in\">\n                <Schedule />\n              </TabsContent>\n            </Tabs>\n          </div>\n        </div>\n\n        {/* Welcome Modal */}\n        <SimpleWelcomeModal \n          open={showWelcome} \n          onComplete={handleWelcomeComplete}\n        />\n        \n        <Toaster />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":8873},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(213.91 100% 61.57%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(159.78 100% 36.08%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --accent: hsl(258.18 73.91% 69.02%);\n  --accent-foreground: hsl(0 0% 100%);\n  --muted: hsl(210 5.26% 50.98%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: 'Inter', 'Open Sans', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  \n  /* Custom JEE App Colors */\n  --jee-primary: hsl(213.91 100% 61.57%);\n  --jee-secondary: hsl(159.78 100% 36.08%);\n  --jee-accent: hsl(258.18 73.91% 69.02%);\n  --jee-muted: hsl(210 5.26% 50.98%);\n  \n  /* Subject Colors */\n  --physics-color: hsl(213.91 100% 61.57%);\n  --chemistry-color: hsl(159.78 100% 36.08%);\n  --mathematics-color: hsl(258.18 73.91% 69.02%);\n  \n  /* Status Colors */\n  --status-pending: hsl(42.0290 92.8251% 56.2745%);\n  --status-progress: hsl(213.91 100% 61.57%);\n  --status-completed: hsl(159.78 100% 36.08%);\n  --status-overdue: hsl(356.3033 90.5579% 54.3137%);\n  \n  /* Animation Variables */\n  --animation-duration: 0.3s;\n  --animation-ease: cubic-bezier(0.4, 0, 0.2, 1);\n  \n  /* Tab transition duration */\n  --tab-transition-duration: 300ms;\n  \n  /* Color transition */\n  transition: background-color 0.3s ease, border-color 0.3s ease, color 0.3s ease;\n}\n\n.dark {\n  --background: hsl(224 71.4% 4.1%);\n  --foreground: hsl(210 20% 98%);\n  --card: hsl(215 27.9% 16.9%);\n  --card-foreground: hsl(210 20% 98%);\n  --popover: hsl(215 27.9% 16.9%);\n  --popover-foreground: hsl(210 20% 98%);\n  --primary: hsl(214 95% 73%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(159 100% 46%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(215 27.9% 16.9%);\n  --muted-foreground: hsl(217.9 10.6% 64.9%);\n  --accent: hsl(258 74% 79%);\n  --accent-foreground: hsl(0 0% 100%);\n  --destructive: hsl(0 63% 31%);\n  --destructive-foreground: hsl(210 20% 98%);\n  --border: hsl(215 27.9% 16.9%);\n  --input: hsl(215 27.9% 16.9%);\n  --ring: hsl(216 12.2% 83.9%);\n  \n  /* Dark theme JEE colors */\n  --jee-primary: hsl(214 95% 73%);\n  --jee-secondary: hsl(159 100% 46%);\n  --jee-accent: hsl(258 74% 79%);\n  --jee-muted: hsl(217.9 10.6% 64.9%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: var(--font-sans);\n  }\n}\n\n@layer components {\n  .jee-primary {\n    background-color: var(--jee-primary);\n    color: white;\n    transition: all 0.3s ease;\n  }\n  \n  .jee-secondary {\n    background-color: var(--jee-secondary);\n    color: white;\n    transition: all 0.3s ease;\n  }\n  \n  .jee-accent {\n    background-color: var(--jee-accent);\n    color: white;\n    transition: all 0.3s ease;\n  }\n  \n  /* Enhanced tab transitions */\n  [data-state=\"active\"] {\n    transition: all 0.4s cubic-bezier(0.23, 1, 0.32, 1) !important;\n  }\n  \n  /* Primary color transitions */\n  .bg-primary, [data-state=\"active\"]:not([data-state=\"inactive\"]) {\n    transition: background-color 0.4s cubic-bezier(0.23, 1, 0.32, 1) !important;\n  }\n  \n  .physics-theme {\n    background-color: hsl(213.91 100% 96%);\n    border-color: hsl(213.91 100% 85%);\n  }\n  \n  .chemistry-theme {\n    background-color: hsl(159.78 100% 96%);\n    border-color: hsl(159.78 100% 85%);\n  }\n  \n  .mathematics-theme {\n    background-color: hsl(258.18 73.91% 96%);\n    border-color: hsl(258.18 73.91% 85%);\n  }\n}\n\n@layer utilities {\n  .animate-float {\n    animation: float 3s ease-in-out infinite;\n  }\n  \n  .animate-pulse-soft {\n    animation: pulse 2s ease-in-out infinite;\n  }\n  \n  .animate-slide-up {\n    animation: slideUp 0.3s ease-out;\n  }\n  \n  .animate-fade-in {\n    animation: fadeIn 0.6s ease-out forwards;\n    opacity: 0;\n  }\n  \n  .animate-scale-in {\n    animation: scaleIn 0.4s ease-out forwards;\n    opacity: 0;\n    transform: scale(0.95);\n  }\n  \n  .animate-slide-in-left {\n    animation: slideInLeft 0.5s ease-out forwards;\n    opacity: 0;\n    transform: translateX(-20px);\n  }\n  \n  .animate-slide-in-right {\n    animation: slideInRight 0.5s ease-out forwards;\n    opacity: 0;\n    transform: translateX(20px);\n  }\n  \n  .animate-bounce-subtle {\n    animation: bounceSubtle 2s ease-in-out infinite;\n  }\n  \n  .animate-glow {\n    animation: glow 2s ease-in-out infinite alternate;\n  }\n  \n  .line-clamp-2 {\n    overflow: hidden;\n    display: -webkit-box;\n    -webkit-box-orient: vertical;\n    -webkit-line-clamp: 2;\n  }\n  \n  .line-clamp-3 {\n    overflow: hidden;\n    display: -webkit-box;\n    -webkit-box-orient: vertical;\n    -webkit-line-clamp: 3;\n  }\n}\n\n@keyframes float {\n  0%, 100% { \n    transform: translateY(0px);\n  }\n  50% { \n    transform: translateY(-10px);\n  }\n}\n\n@keyframes slideUp {\n  0% { \n    transform: translateY(10px);\n    opacity: 0;\n  }\n  100% { \n    transform: translateY(0px);\n    opacity: 1;\n  }\n}\n\n@keyframes fadeIn {\n  0% { \n    opacity: 0;\n  }\n  100% { \n    opacity: 1;\n  }\n}\n\n@keyframes scaleIn {\n  0% { \n    transform: scale(0.95);\n    opacity: 0;\n  }\n  100% { \n    transform: scale(1);\n    opacity: 1;\n  }\n}\n\n@keyframes slideInLeft {\n  from {\n    opacity: 0;\n    transform: translateX(-20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateX(0);\n  }\n}\n\n@keyframes slideInRight {\n  from {\n    opacity: 0;\n    transform: translateX(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateX(0);\n  }\n}\n\n@keyframes bounceSubtle {\n  0%, 100% {\n    transform: translateY(0);\n  }\n  50% {\n    transform: translateY(-5px);\n  }\n}\n\n@keyframes glow {\n  from {\n    box-shadow: 0 0 5px rgba(59, 130, 246, 0.5);\n  }\n  to {\n    box-shadow: 0 0 20px rgba(59, 130, 246, 0.8), 0 0 30px rgba(59, 130, 246, 0.4);\n  }\n}\n\n/* Ensure proper z-index layering for dialogs and popovers */\n[data-radix-popper-content-wrapper] {\n  z-index: 50;\n}\n\n[data-radix-dialog-overlay] {\n  z-index: 50;\n}\n\n[data-radix-dialog-content] {\n  z-index: 51;\n}\n\n/* Ensure proper pointer events for interactive elements */\n[data-state=\"open\"] {\n  pointer-events: auto;\n}\n\n/* Beautiful Modal Styling */\n.modal-backdrop {\n  backdrop-filter: blur(8px);\n  background: rgba(0, 0, 0, 0.5);\n  transition: all 0.3s ease-out;\n}\n\n.modal-content {\n  background: linear-gradient(145deg, rgba(255, 255, 255, 0.95), rgba(255, 255, 255, 0.9));\n  backdrop-filter: blur(20px);\n  border: 1px solid rgba(255, 255, 255, 0.2);\n  box-shadow: \n    0 25px 50px -12px rgba(0, 0, 0, 0.25),\n    0 0 0 1px rgba(255, 255, 255, 0.05),\n    inset 0 1px 0 rgba(255, 255, 255, 0.1);\n  border-radius: 1rem;\n  position: relative;\n  overflow: hidden;\n  /* Enhanced responsive height */\n  max-height: min(90vh, 800px);\n  min-height: min(200px, 30vh);\n}\n\n/* Responsive modal sizing */\n.modal-content-scrollable {\n  display: flex;\n  flex-direction: column;\n  max-height: min(90vh, 800px);\n  min-height: min(200px, 30vh);\n}\n\n.modal-body-scrollable {\n  flex: 1;\n  overflow-y: auto;\n  overflow-x: hidden;\n  padding: 0;\n  margin: 0;\n}\n\n/* Enhanced scrollbar specifically for modal content */\n.modal-body-scrollable::-webkit-scrollbar {\n  width: 10px;\n}\n\n.modal-body-scrollable::-webkit-scrollbar-track {\n  background: rgba(0, 0, 0, 0.05);\n  border-radius: 5px;\n  margin: 4px;\n}\n\n.modal-body-scrollable::-webkit-scrollbar-thumb {\n  background: linear-gradient(135deg, rgba(59, 130, 246, 0.6), rgba(139, 92, 246, 0.6));\n  border-radius: 5px;\n  border: 1px solid rgba(255, 255, 255, 0.2);\n  transition: all 0.3s ease;\n}\n\n.modal-body-scrollable::-webkit-scrollbar-thumb:hover {\n  background: linear-gradient(135deg, rgba(59, 130, 246, 0.8), rgba(139, 92, 246, 0.8));\n  transform: scale(1.1);\n  box-shadow: 0 4px 8px rgba(59, 130, 246, 0.3);\n}\n\n.dark .modal-body-scrollable::-webkit-scrollbar-track {\n  background: rgba(255, 255, 255, 0.05);\n}\n\n.dark .modal-body-scrollable::-webkit-scrollbar-thumb {\n  background: linear-gradient(135deg, rgba(96, 165, 250, 0.6), rgba(167, 139, 250, 0.6));\n  border: 1px solid rgba(255, 255, 255, 0.1);\n}\n\n.dark .modal-body-scrollable::-webkit-scrollbar-thumb:hover {\n  background: linear-gradient(135deg, rgba(96, 165, 250, 0.8), rgba(167, 139, 250, 0.8));\n  box-shadow: 0 4px 8px rgba(96, 165, 250, 0.3);\n}\n\n/* Responsive modal breakpoints */\n@media (max-width: 640px) {\n  .modal-content {\n    max-height: 95vh;\n    min-height: 200px;\n    margin: 10px;\n    border-radius: 0.75rem;\n  }\n  \n  .modal-content-scrollable {\n    max-height: 95vh;\n    min-height: 200px;\n  }\n  \n  .modal-body-scrollable::-webkit-scrollbar {\n    width: 8px;\n  }\n}\n\n@media (min-width: 641px) and (max-width: 1024px) {\n  .modal-content {\n    max-height: min(85vh, 700px);\n    min-height: min(250px, 35vh);\n  }\n  \n  .modal-content-scrollable {\n    max-height: min(85vh, 700px);\n    min-height: min(250px, 35vh);\n  }\n}\n\n@media (min-width: 1025px) {\n  .modal-content {\n    max-height: min(80vh, 800px);\n    min-height: min(300px, 40vh);\n  }\n  \n  .modal-content-scrollable {\n    max-height: min(80vh, 800px);\n    min-height: min(300px, 40vh);\n  }\n}\n\n/* Modal height utilities */\n.modal-sm {\n  max-height: min(50vh, 400px);\n}\n\n.modal-md {\n  max-height: min(70vh, 600px);\n}\n\n.modal-lg {\n  max-height: min(85vh, 800px);\n}\n\n.modal-xl {\n  max-height: min(95vh, 1000px);\n}\n\n.modal-content::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: -100%;\n  width: 100%;\n  height: 1px;\n  background: linear-gradient(90deg, transparent, rgba(59, 130, 246, 0.4), transparent);\n  animation: shimmer 3s infinite;\n}\n\n.dark .modal-content {\n  background: linear-gradient(145deg, rgba(31, 41, 55, 0.95), rgba(17, 24, 39, 0.9));\n  border: 1px solid rgba(55, 65, 81, 0.3);\n  box-shadow: \n    0 25px 50px -12px rgba(0, 0, 0, 0.5),\n    0 0 0 1px rgba(255, 255, 255, 0.05),\n    inset 0 1px 0 rgba(255, 255, 255, 0.05);\n}\n\n.modal-header {\n  background: linear-gradient(135deg, rgba(59, 130, 246, 0.1), rgba(139, 92, 246, 0.05));\n  border-bottom: 1px solid rgba(59, 130, 246, 0.1);\n  margin: -1.5rem -1.5rem 1.5rem;\n  padding: 1.5rem;\n  position: relative;\n}\n\n.dark .modal-header {\n  background: linear-gradient(135deg, rgba(59, 130, 246, 0.15), rgba(139, 92, 246, 0.1));\n  border-bottom: 1px solid rgba(59, 130, 246, 0.2);\n}\n\n.modal-icon-container {\n  background: linear-gradient(135deg, rgba(59, 130, 246, 0.1), rgba(139, 92, 246, 0.1));\n  border: 2px solid rgba(59, 130, 246, 0.2);\n  transition: all 0.3s ease;\n}\n\n.modal-icon-container:hover {\n  transform: scale(1.05);\n  box-shadow: 0 8px 25px rgba(59, 130, 246, 0.3);\n}\n\n.modal-button {\n  position: relative;\n  overflow: hidden;\n  transition: all 0.3s ease;\n}\n\n.modal-button::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: -100%;\n  width: 100%;\n  height: 100%;\n  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);\n  transition: left 0.5s;\n}\n\n.modal-button:hover::before {\n  left: 100%;\n}\n\n.modal-button:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);\n}\n\n/* Status-specific colors for confirmation dialogs */\n.modal-destructive .modal-icon-container {\n  background: linear-gradient(135deg, rgba(239, 68, 68, 0.1), rgba(220, 38, 38, 0.1));\n  border-color: rgba(239, 68, 68, 0.3);\n}\n\n.modal-warning .modal-icon-container {\n  background: linear-gradient(135deg, rgba(245, 158, 11, 0.1), rgba(217, 119, 6, 0.1));\n  border-color: rgba(245, 158, 11, 0.3);\n}\n\n/* Input field enhancements */\n.modal-input {\n  background: rgba(255, 255, 255, 0.8);\n  border: 2px solid rgba(229, 231, 235, 0.5);\n  backdrop-filter: blur(10px);\n  transition: all 0.3s ease;\n}\n\n.modal-input:focus {\n  border-color: rgba(59, 130, 246, 0.5);\n  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);\n  background: rgba(255, 255, 255, 0.95);\n}\n\n.dark .modal-input {\n  background: rgba(31, 41, 55, 0.8);\n  border-color: rgba(75, 85, 99, 0.5);\n}\n\n.dark .modal-input:focus {\n  border-color: rgba(96, 165, 250, 0.5);\n  background: rgba(31, 41, 55, 0.95);\n}\n\n/* Enhanced Custom Scrollbar */\n::-webkit-scrollbar {\n  width: 8px;\n}\n\n::-webkit-scrollbar-track {\n  background: hsl(0 0% 96%);\n  border-radius: 4px;\n  margin: 2px;\n}\n\n::-webkit-scrollbar-thumb {\n  background: linear-gradient(135deg, hsl(210 5.26% 75%), hsl(210 5.26% 65%));\n  border-radius: 4px;\n  border: 1px solid hsl(0 0% 92%);\n  transition: all 0.2s ease;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: linear-gradient(135deg, hsl(210 5.26% 65%), hsl(210 5.26% 55%));\n  transform: scale(1.1);\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n::-webkit-scrollbar-thumb:active {\n  background: linear-gradient(135deg, hsl(210 5.26% 55%), hsl(210 5.26% 45%));\n}\n\n/* Dark mode scrollbar */\n.dark ::-webkit-scrollbar-track {\n  background: hsl(215 27.9% 20%);\n  border-radius: 4px;\n}\n\n.dark ::-webkit-scrollbar-thumb {\n  background: linear-gradient(135deg, hsl(215 27.9% 35%), hsl(215 27.9% 25%));\n  border: 1px solid hsl(215 27.9% 30%);\n}\n\n.dark ::-webkit-scrollbar-thumb:hover {\n  background: linear-gradient(135deg, hsl(215 27.9% 45%), hsl(215 27.9% 35%));\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);\n}\n\n.dark ::-webkit-scrollbar-thumb:active {\n  background: linear-gradient(135deg, hsl(215 27.9% 55%), hsl(215 27.9% 45%));\n}\n\n/* Progress bar animations */\n.progress-bar {\n  transition: width 1s ease-out;\n}\n\n/* Ripple effect */\n.ripple {\n  position: relative;\n  overflow: hidden;\n}\n\n.ripple::before {\n  content: '';\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: 0;\n  height: 0;\n  border-radius: 50%;\n  background: rgba(255, 255, 255, 0.3);\n  transition: width 0.6s, height 0.6s;\n  transform: translate(-50%, -50%);\n  pointer-events: none;\n}\n\n.ripple:active::before {\n  width: 300px;\n  height: 300px;\n}\n","size_bytes":14755},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/header.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { GraduationCap, User } from 'lucide-react';\nimport { ThemeToggle } from '@/components/theme-toggle';\nimport type { UserProfile } from '@/lib/storage';\nimport { userProfileStorage } from '@/lib/storage';\n\ninterface HeaderProps {\n  userProfile: UserProfile | null;\n}\n\nexport function Header({ userProfile }: HeaderProps) {\n  const [currentProfile, setCurrentProfile] = useState<UserProfile | null>(userProfile);\n\n  // Update local profile when prop changes\n  useEffect(() => {\n    setCurrentProfile(userProfile);\n  }, [userProfile]);\n  \n  const getInitials = (name: string) => {\n    return name\n      .split(' ')\n      .map(word => word.charAt(0).toUpperCase())\n      .slice(0, 2)\n      .join('');\n  };\n  return (\n    <header className=\"bg-card/95 backdrop-blur-sm shadow-sm border-b border-border sticky top-0 z-50 animate-slide-in-left\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex items-center space-x-2 group\">\n              <div className=\"w-8 h-8 bg-gradient-to-r from-jee-primary to-jee-accent rounded-lg flex items-center justify-center transition-all duration-300 group-hover:scale-110 group-hover:rotate-3\">\n                <GraduationCap className=\"text-white text-sm transition-transform duration-300\" size={16} />\n              </div>\n              <h1 className=\"text-xl font-bold text-foreground group-hover:text-primary transition-colors duration-300\">JEE Study Manager</h1>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-4 animate-slide-in-right\">\n            <ThemeToggle />\n            <div \n              className=\"w-8 h-8 bg-gradient-to-r from-jee-secondary to-jee-primary rounded-full flex items-center justify-center transition-all duration-300 hover:scale-110 hover:shadow-lg cursor-pointer\"\n              data-testid=\"user-avatar\"\n              title={currentProfile?.name || 'User'}\n            >\n              {currentProfile?.name ? (\n                <span className=\"text-white text-sm font-medium\">\n                  {getInitials(currentProfile.name)}\n                </span>\n              ) : (\n                <User className=\"text-white transition-transform duration-300 hover:rotate-12\" size={16} />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":2513},"client/src/components/theme-provider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\"\nimport { userProfileStorage } from \"@/lib/storage\"\n\ntype Theme = \"dark\" | \"light\" | \"system\"\n\ntype ThemeProviderProps = {\n  children: React.ReactNode\n  defaultTheme?: Theme\n  storageKey?: string\n}\n\ntype ThemeProviderState = {\n  theme: Theme\n  setTheme: (theme: Theme) => void\n}\n\nconst initialState: ThemeProviderState = {\n  theme: \"system\",\n  setTheme: () => null,\n}\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState)\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"system\",\n  storageKey = \"jee-ui-theme\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(() => {\n    // Try to get theme from user profile first\n    const userProfile = userProfileStorage.get()\n    if (userProfile?.preferences.theme === 'dark' || userProfile?.preferences.theme === 'light') {\n      return userProfile.preferences.theme\n    }\n    \n    // Fallback to localStorage\n    const stored = localStorage.getItem(storageKey) as Theme\n    return stored || defaultTheme\n  })\n\n  useEffect(() => {\n    const root = window.document.documentElement\n\n    root.classList.remove(\"light\", \"dark\")\n\n    if (theme === \"system\") {\n      const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\")\n        .matches\n        ? \"dark\"\n        : \"light\"\n\n      root.classList.add(systemTheme)\n      return\n    }\n\n    root.classList.add(theme)\n  }, [theme])\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme)\n      \n      // Update user profile if it exists\n      const userProfile = userProfileStorage.get()\n      if (userProfile && (theme === 'dark' || theme === 'light')) {\n        userProfileStorage.update({\n          preferences: {\n            ...userProfile.preferences,\n            theme: theme\n          }\n        })\n      }\n      \n      setTheme(theme)\n    },\n  }\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  )\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext)\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\")\n\n  return context\n}","size_bytes":2274},"client/src/components/theme-toggle.tsx":{"content":"import { Moon, Sun } from \"lucide-react\"\nimport { Button } from \"@/components/ui/button\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nimport { useTheme } from \"@/components/theme-provider\"\n\nexport function ThemeToggle() {\n  const { setTheme } = useTheme()\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"outline\" size=\"sm\" className=\"w-9 px-0\">\n          <Sun className=\"h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n          <Moon className=\"absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n          <span className=\"sr-only\">Toggle theme</span>\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\">\n        <DropdownMenuItem onClick={() => setTheme(\"light\")}>\n          Light\n        </DropdownMenuItem>\n        <DropdownMenuItem onClick={() => setTheme(\"dark\")}>\n          Dark\n        </DropdownMenuItem>\n        <DropdownMenuItem onClick={() => setTheme(\"system\")}>\n          System\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  )\n}","size_bytes":1225},"client/src/hooks/use-local-storage.tsx":{"content":"import { useState, useEffect } from 'react';\n\nexport function useLocalStorage<T>(\n  key: string,\n  initialValue: T\n): [T, (value: T | ((val: T) => T)) => void] {\n  // Get from local storage then parse stored json or return initialValue\n  const [storedValue, setStoredValue] = useState<T>(() => {\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      console.error(`Error reading localStorage key \"${key}\":`, error);\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that persists the new value to localStorage\n  const setValue = (value: T | ((val: T) => T)) => {\n    try {\n      // Allow value to be a function so we have the same API as useState\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n      setStoredValue(valueToStore);\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      console.error(`Error setting localStorage key \"${key}\":`, error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n","size_bytes":1118},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-timer.tsx":{"content":"import { useState, useEffect, useRef, useCallback } from 'react';\n\ninterface TimerState {\n  timeLeft: number;\n  isRunning: boolean;\n  isPaused: boolean;\n  totalTime: number;\n}\n\nexport function useTimer(initialTime: number = 25 * 60) {\n  const [timer, setTimer] = useState<TimerState>({\n    timeLeft: initialTime,\n    isRunning: false,\n    isPaused: false,\n    totalTime: initialTime,\n  });\n\n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\n\n  const start = useCallback(() => {\n    setTimer(prev => ({ ...prev, isRunning: true, isPaused: false }));\n  }, []);\n\n  const pause = useCallback(() => {\n    setTimer(prev => ({ ...prev, isRunning: false, isPaused: true }));\n  }, []);\n\n  const reset = useCallback(() => {\n    setTimer(prev => ({\n      ...prev,\n      timeLeft: prev.totalTime,\n      isRunning: false,\n      isPaused: false,\n    }));\n  }, []);\n\n  const setTime = useCallback((time: number) => {\n    setTimer(prev => ({\n      ...prev,\n      timeLeft: time,\n      totalTime: time,\n      isRunning: false,\n      isPaused: false,\n    }));\n  }, []);\n\n  useEffect(() => {\n    if (timer.isRunning && timer.timeLeft > 0) {\n      intervalRef.current = setInterval(() => {\n        setTimer(prev => {\n          if (prev.timeLeft <= 1) {\n            return {\n              ...prev,\n              timeLeft: 0,\n              isRunning: false,\n              isPaused: false,\n            };\n          }\n          return { ...prev, timeLeft: prev.timeLeft - 1 };\n        });\n      }, 1000);\n    } else {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n        intervalRef.current = null;\n      }\n    }\n\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, [timer.isRunning, timer.timeLeft]);\n\n  const formatTime = useCallback((seconds: number) => {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;\n  }, []);\n\n  const progress = timer.totalTime > 0 ? (timer.totalTime - timer.timeLeft) / timer.totalTime : 0;\n\n  return {\n    timeLeft: timer.timeLeft,\n    formattedTime: formatTime(timer.timeLeft),\n    isRunning: timer.isRunning,\n    isPaused: timer.isPaused,\n    progress,\n    start,\n    pause,\n    reset,\n    setTime,\n  };\n}\n","size_bytes":2358},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/storage.ts":{"content":"import { nanoid } from 'nanoid';\nimport type { \n  Task, \n  InsertTask, \n  Resource, \n  InsertResource, \n  StudySession, \n  InsertStudySession,\n  ScheduleItem,\n  InsertScheduleItem,\n  Activity,\n  UserStats,\n  Subject\n} from '@shared/schema';\n\n// Storage keys\nconst STORAGE_KEYS = {\n  USER_PROFILE: 'jee_user_profile',\n  TASKS: 'jee_tasks',\n  RESOURCES: 'jee_resources',\n  STUDY_SESSIONS: 'jee_study_sessions',\n  SCHEDULE: 'jee_schedule',\n  ACTIVITIES: 'jee_activities',\n  USER_STATS: 'jee_user_stats',\n  WEEKLY_PROGRESS: 'jee_weekly_progress',\n} as const;\n\n// User profile interface\nexport interface UserProfile {\n  name: string;\n  joinDate: string;\n  lastActiveDate: string;\n  preferences: {\n    defaultSubject: Subject;\n    defaultTimerDuration: number;\n    theme: 'light' | 'dark';\n  };\n}\n\n// Generic storage functions\nfunction getFromStorage<T>(key: string, defaultValue: T): T {\n  try {\n    const item = localStorage.getItem(key);\n    return item ? JSON.parse(item) : defaultValue;\n  } catch (error) {\n    console.error(`Error reading from localStorage:`, error);\n    return defaultValue;\n  }\n}\n\nfunction saveToStorage<T>(key: string, data: T): void {\n  try {\n    localStorage.setItem(key, JSON.stringify(data));\n  } catch (error) {\n    console.error(`Error saving to localStorage:`, error);\n  }\n}\n\n// Task management\nexport const taskStorage = {\n  getAll: (): Task[] => getFromStorage(STORAGE_KEYS.TASKS, []),\n  \n  getById: (id: string): Task | undefined => {\n    const tasks = taskStorage.getAll();\n    return tasks.find(task => task.id === id);\n  },\n  \n  getBySubject: (subject: Subject): Task[] => {\n    const tasks = taskStorage.getAll();\n    return tasks.filter(task => task.subject === subject);\n  },\n  \n  create: (taskData: InsertTask): Task => {\n    const tasks = taskStorage.getAll();\n    const newTask: Task = {\n      ...taskData,\n      id: nanoid(),\n      status: 'pending',\n      createdAt: new Date().toISOString(),\n    };\n    \n    tasks.push(newTask);\n    saveToStorage(STORAGE_KEYS.TASKS, tasks);\n    \n    // Add activity\n    activityStorage.create({\n      type: 'task_created',\n      description: `Created task \"${newTask.title}\"`,\n      subject: newTask.subject,\n      timestamp: new Date().toISOString(),\n    });\n    \n    // Update stats\n    userStatsStorage.updateTaskCount();\n    weeklyProgressStorage.update();\n    \n    return newTask;\n  },\n  \n  update: (id: string, updates: Partial<Task>): Task | null => {\n    const tasks = taskStorage.getAll();\n    const index = tasks.findIndex(task => task.id === id);\n    \n    if (index === -1) return null;\n    \n    const updatedTask = { ...tasks[index], ...updates };\n    \n    // Handle completion\n    if (updates.status === 'completed' && tasks[index].status !== 'completed') {\n      updatedTask.completedAt = new Date().toISOString();\n      \n      // Add activity\n      activityStorage.create({\n        type: 'task_completed',\n        description: `Completed task \"${updatedTask.title}\"`,\n        subject: updatedTask.subject,\n        timestamp: new Date().toISOString(),\n      });\n      \n      // Update stats\n      userStatsStorage.updateTaskCompletion();\n      weeklyProgressStorage.update();\n    }\n    \n    tasks[index] = updatedTask;\n    saveToStorage(STORAGE_KEYS.TASKS, tasks);\n    \n    return updatedTask;\n  },\n  \n  delete: (id: string): boolean => {\n    const tasks = taskStorage.getAll();\n    const filteredTasks = tasks.filter(task => task.id !== id);\n    \n    if (filteredTasks.length === tasks.length) return false;\n    \n    saveToStorage(STORAGE_KEYS.TASKS, filteredTasks);\n    return true;\n  },\n  \n  getStats: () => {\n    const tasks = taskStorage.getAll();\n    const total = tasks.length;\n    const completed = tasks.filter(task => task.status === 'completed').length;\n    const pending = tasks.filter(task => task.status === 'pending').length;\n    const inProgress = tasks.filter(task => task.status === 'in-progress').length;\n    const overdue = tasks.filter(task => {\n      const now = new Date();\n      const dueDate = new Date(task.dueDate);\n      return task.status !== 'completed' && dueDate < now;\n    }).length;\n    \n    return { total, completed, pending, inProgress, overdue };\n  },\n};\n\n// Resource management\nexport const resourceStorage = {\n  getAll: (): Resource[] => getFromStorage(STORAGE_KEYS.RESOURCES, []),\n  \n  getBySubject: (subject: Subject | 'General'): Resource[] => {\n    const resources = resourceStorage.getAll();\n    return resources.filter(resource => resource.subject === subject);\n  },\n  \n  create: (resourceData: InsertResource): Resource => {\n    const resources = resourceStorage.getAll();\n    const newResource: Resource = {\n      ...resourceData,\n      id: nanoid(),\n      createdAt: new Date().toISOString(),\n    };\n    \n    resources.push(newResource);\n    saveToStorage(STORAGE_KEYS.RESOURCES, resources);\n    \n    // Add activity\n    activityStorage.create({\n      type: 'resource_added',\n      description: `Added resource \"${newResource.title}\"`,\n      subject: newResource.subject === 'General' ? undefined : newResource.subject as Subject,\n      timestamp: new Date().toISOString(),\n    });\n    \n    return newResource;\n  },\n  \n  delete: (id: string): boolean => {\n    const resources = resourceStorage.getAll();\n    const filteredResources = resources.filter(resource => resource.id !== id);\n    \n    if (filteredResources.length === resources.length) return false;\n    \n    saveToStorage(STORAGE_KEYS.RESOURCES, filteredResources);\n    return true;\n  },\n};\n\n// Study session management\nexport const studySessionStorage = {\n  getAll: (): StudySession[] => getFromStorage(STORAGE_KEYS.STUDY_SESSIONS, []),\n  \n  create: (sessionData: InsertStudySession): StudySession => {\n    const sessions = studySessionStorage.getAll();\n    const newSession: StudySession = {\n      ...sessionData,\n      id: nanoid(),\n    };\n    \n    sessions.push(newSession);\n    saveToStorage(STORAGE_KEYS.STUDY_SESSIONS, sessions);\n    \n    // Add activity\n    activityStorage.create({\n      type: 'study_session',\n      description: `Studied ${sessionData.subject} for ${sessionData.duration} minutes`,\n      subject: sessionData.subject,\n      timestamp: new Date().toISOString(),\n    });\n    \n    // Update stats\n    userStatsStorage.updateStudyTime(sessionData.duration);\n    weeklyProgressStorage.update();\n    \n    return newSession;\n  },\n  \n  getTodaysSessions: (): StudySession[] => {\n    const sessions = studySessionStorage.getAll();\n    const today = new Date().toDateString();\n    \n    return sessions.filter(session => {\n      const sessionDate = new Date(session.startTime).toDateString();\n      return sessionDate === today;\n    });\n  },\n  \n  getBySubject: (subject: Subject): StudySession[] => {\n    const sessions = studySessionStorage.getAll();\n    return sessions.filter(session => session.subject === subject);\n  },\n};\n\n// Schedule management\nexport const scheduleStorage = {\n  getAll: (): ScheduleItem[] => getFromStorage(STORAGE_KEYS.SCHEDULE, []),\n  \n  getTodaysSchedule: (): ScheduleItem[] => {\n    const schedule = scheduleStorage.getAll();\n    const today = new Date().toISOString().split('T')[0];\n    \n    return schedule.filter(item => item.date === today);\n  },\n  \n  create: (scheduleData: InsertScheduleItem): ScheduleItem => {\n    const schedule = scheduleStorage.getAll();\n    const newItem: ScheduleItem = {\n      ...scheduleData,\n      id: nanoid(),\n      completed: false,\n    };\n    \n    schedule.push(newItem);\n    saveToStorage(STORAGE_KEYS.SCHEDULE, schedule);\n    \n    return newItem;\n  },\n  \n  update: (id: string, updates: Partial<ScheduleItem>): ScheduleItem | null => {\n    const schedule = scheduleStorage.getAll();\n    const index = schedule.findIndex(item => item.id === id);\n    \n    if (index === -1) return null;\n    \n    const updatedItem = { ...schedule[index], ...updates };\n    schedule[index] = updatedItem;\n    saveToStorage(STORAGE_KEYS.SCHEDULE, schedule);\n    \n    return updatedItem;\n  },\n  \n  delete: (id: string): boolean => {\n    const schedule = scheduleStorage.getAll();\n    const filteredSchedule = schedule.filter(item => item.id !== id);\n    \n    if (filteredSchedule.length === schedule.length) return false;\n    \n    saveToStorage(STORAGE_KEYS.SCHEDULE, filteredSchedule);\n    return true;\n  },\n};\n\n// Activity management\nexport const activityStorage = {\n  getAll: (): Activity[] => getFromStorage(STORAGE_KEYS.ACTIVITIES, []),\n  \n  getRecent: (limit: number = 10): Activity[] => {\n    const activities = activityStorage.getAll();\n    return activities\n      .sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime())\n      .slice(0, limit);\n  },\n  \n  create: (activityData: Omit<Activity, 'id'>): Activity => {\n    const activities = activityStorage.getAll();\n    const newActivity: Activity = {\n      ...activityData,\n      id: nanoid(),\n    };\n    \n    activities.push(newActivity);\n    \n    // Keep only last 100 activities\n    if (activities.length > 100) {\n      activities.splice(0, activities.length - 100);\n    }\n    \n    saveToStorage(STORAGE_KEYS.ACTIVITIES, activities);\n    \n    return newActivity;\n  },\n};\n\n// User stats management\nexport const userStatsStorage = {\n  get: (): UserStats => getFromStorage(STORAGE_KEYS.USER_STATS, {\n    totalTasks: 0,\n    completedTasks: 0,\n    totalStudyTime: 0,\n    currentStreak: 0,\n    subjectProgress: {\n      Physics: 0,\n      Chemistry: 0,\n      Mathematics: 0,\n    },\n  }),\n  \n  updateTaskCount: (): void => {\n    const stats = userStatsStorage.get();\n    const taskStats = taskStorage.getStats();\n    \n    const updatedStats = {\n      ...stats,\n      totalTasks: taskStats.total,\n      completedTasks: taskStats.completed,\n    };\n    \n    // Update subject progress\n    ['Physics', 'Chemistry', 'Mathematics'].forEach(subject => {\n      const subjectTasks = taskStorage.getBySubject(subject as Subject);\n      const completedSubjectTasks = subjectTasks.filter(task => task.status === 'completed');\n      const progress = subjectTasks.length > 0 ? (completedSubjectTasks.length / subjectTasks.length) * 100 : 0;\n      updatedStats.subjectProgress[subject as Subject] = Math.round(progress);\n    });\n    \n    saveToStorage(STORAGE_KEYS.USER_STATS, updatedStats);\n  },\n  \n  updateTaskCompletion: (): void => {\n    userStatsStorage.updateTaskCount();\n    userStatsStorage.updateStreak();\n  },\n  \n  updateStudyTime: (minutes: number): void => {\n    const stats = userStatsStorage.get();\n    const updatedStats = {\n      ...stats,\n      totalStudyTime: stats.totalStudyTime + minutes,\n      lastStudyDate: new Date().toISOString(),\n    };\n    \n    saveToStorage(STORAGE_KEYS.USER_STATS, updatedStats);\n    userStatsStorage.updateStreak();\n  },\n  \n  updateStreak: (): void => {\n    const stats = userStatsStorage.get();\n    const today = new Date().toDateString();\n    const lastStudyDate = stats.lastStudyDate ? new Date(stats.lastStudyDate).toDateString() : null;\n    \n    let newStreak = stats.currentStreak;\n    \n    if (lastStudyDate === today) {\n      // Already studied today, keep streak\n      return;\n    } else if (lastStudyDate) {\n      const yesterday = new Date();\n      yesterday.setDate(yesterday.getDate() - 1);\n      const yesterdayString = yesterday.toDateString();\n      \n      if (lastStudyDate === yesterdayString) {\n        // Studied yesterday, increment streak\n        newStreak = stats.currentStreak + 1;\n      } else {\n        // Gap in studying, reset streak\n        newStreak = 1;\n      }\n    } else {\n      // First time studying\n      newStreak = 1;\n    }\n    \n    const updatedStats = {\n      ...stats,\n      currentStreak: newStreak,\n      lastStudyDate: new Date().toISOString(),\n    };\n    \n    saveToStorage(STORAGE_KEYS.USER_STATS, updatedStats);\n  },\n};\n\n// Weekly progress interface\nexport interface WeeklyProgress {\n  weekStart: string;\n  Physics: number;\n  Chemistry: number;\n  Mathematics: number;\n  lastUpdated: string;\n}\n\n// Weekly progress management\nexport const weeklyProgressStorage = {\n  get: (): WeeklyProgress => {\n    const currentWeekStart = getWeekStart();\n    const stored = getFromStorage<WeeklyProgress | null>(STORAGE_KEYS.WEEKLY_PROGRESS, null);\n    \n    // If no stored data or it's from a different week, calculate fresh\n    if (!stored || stored.weekStart !== currentWeekStart) {\n      return weeklyProgressStorage.calculate();\n    }\n    \n    return stored;\n  },\n  \n  calculate: (): WeeklyProgress => {\n    const currentWeekStart = getWeekStart();\n    const weekEnd = getWeekEnd();\n    \n    const progress: WeeklyProgress = {\n      weekStart: currentWeekStart,\n      Physics: 0,\n      Chemistry: 0,\n      Mathematics: 0,\n      lastUpdated: new Date().toISOString(),\n    };\n    \n    // Calculate progress for each subject based on tasks completed this week\n    (['Physics', 'Chemistry', 'Mathematics'] as Subject[]).forEach(subject => {\n      const allSubjectTasks = taskStorage.getBySubject(subject);\n      const weekTasks = allSubjectTasks.filter(task => {\n        const taskDate = new Date(task.createdAt);\n        return taskDate >= new Date(currentWeekStart) && taskDate <= new Date(weekEnd);\n      });\n      \n      const completedWeekTasks = weekTasks.filter(task => \n        task.status === 'completed' && \n        task.completedAt &&\n        new Date(task.completedAt) >= new Date(currentWeekStart) &&\n        new Date(task.completedAt) <= new Date(weekEnd)\n      );\n      \n      // Also consider study sessions for this week\n      const weekSessions = studySessionStorage.getBySubject(subject).filter(session => {\n        const sessionDate = new Date(session.startTime);\n        return sessionDate >= new Date(currentWeekStart) && sessionDate <= new Date(weekEnd);\n      });\n      \n      const totalStudyMinutes = weekSessions.reduce((total, session) => total + session.duration, 0);\n      \n      // Calculate progress: 60% from completed tasks, 40% from study time\n      const taskProgress = weekTasks.length > 0 ? (completedWeekTasks.length / weekTasks.length) * 60 : 0;\n      const studyProgress = Math.min((totalStudyMinutes / 180) * 40, 40); // 180 minutes = 3 hours target per week\n      \n      progress[subject] = Math.round(taskProgress + studyProgress);\n    });\n    \n    // Save to storage\n    saveToStorage(STORAGE_KEYS.WEEKLY_PROGRESS, progress);\n    \n    return progress;\n  },\n  \n  update: (): WeeklyProgress => {\n    return weeklyProgressStorage.calculate();\n  },\n};\n\n// Helper function to get the start of the current week (Monday)\nfunction getWeekStart(): string {\n  const now = new Date();\n  const dayOfWeek = now.getDay();\n  const mondayOffset = dayOfWeek === 0 ? -6 : 1 - dayOfWeek; // Sunday is 0, Monday is 1\n  \n  const monday = new Date(now);\n  monday.setDate(now.getDate() + mondayOffset);\n  monday.setHours(0, 0, 0, 0);\n  \n  return monday.toISOString();\n}\n\n// Helper function to get the end of the current week (Sunday)\nfunction getWeekEnd(): string {\n  const now = new Date();\n  const dayOfWeek = now.getDay();\n  const sundayOffset = dayOfWeek === 0 ? 0 : 7 - dayOfWeek;\n  \n  const sunday = new Date(now);\n  sunday.setDate(now.getDate() + sundayOffset);\n  sunday.setHours(23, 59, 59, 999);\n  \n  return sunday.toISOString();\n}\n\n// User profile management\nexport const userProfileStorage = {\n  get: (): UserProfile | null => {\n    try {\n      const profile = localStorage.getItem(STORAGE_KEYS.USER_PROFILE);\n      return profile ? JSON.parse(profile) : null;\n    } catch (error) {\n      console.error('Error reading user profile:', error);\n      return null;\n    }\n  },\n\n  create: (name: string): UserProfile => {\n    const profile: UserProfile = {\n      name: name.trim(),\n      joinDate: new Date().toISOString(),\n      lastActiveDate: new Date().toISOString(),\n      preferences: {\n        defaultSubject: 'Physics',\n        defaultTimerDuration: 25,\n        theme: 'light',\n      },\n    };\n    \n    saveToStorage(STORAGE_KEYS.USER_PROFILE, profile);\n    return profile;\n  },\n\n  update: (updates: Partial<UserProfile>): UserProfile | null => {\n    const existingProfile = userProfileStorage.get();\n    if (!existingProfile) return null;\n    \n    const updatedProfile = {\n      ...existingProfile,\n      ...updates,\n      lastActiveDate: new Date().toISOString(),\n    };\n    \n    saveToStorage(STORAGE_KEYS.USER_PROFILE, updatedProfile);\n    return updatedProfile;\n  },\n\n  updateLastActive: (): void => {\n    const profile = userProfileStorage.get();\n    if (profile) {\n      userProfileStorage.update({ lastActiveDate: new Date().toISOString() });\n    }\n  },\n\n  isFirstTime: (): boolean => {\n    return userProfileStorage.get() === null;\n  },\n};\n\n// Initialize default data\nexport const initializeDefaultData = (): void => {\n  // Create some default resources if none exist\n  const existingResources = resourceStorage.getAll();\n  if (existingResources.length === 0) {\n    const defaultResources = [\n      {\n        title: \"Physics Wallah\",\n        url: \"https://www.pw.live/\",\n        description: \"Comprehensive JEE preparation platform with live classes and study material\",\n        subject: \"General\" as const,\n        category: \"website\" as const,\n      },\n      {\n        title: \"NCERT Physics Solutions\",\n        url: \"https://ncert.nic.in/textbook.php?leph1=0-10\",\n        description: \"Complete solutions for NCERT Physics textbook\",\n        subject: \"Physics\" as const,\n        category: \"book\" as const,\n      },\n      {\n        title: \"Khan Academy Chemistry\",\n        url: \"https://www.khanacademy.org/science/chemistry\",\n        description: \"Free online chemistry courses and tutorials\",\n        subject: \"Chemistry\" as const,\n        category: \"video\" as const,\n      },\n      {\n        title: \"Math Formula Reference\",\n        url: \"https://en.wikipedia.org/wiki/List_of_mathematical_formulas\",\n        description: \"Comprehensive list of mathematical formulas\",\n        subject: \"Mathematics\" as const,\n        category: \"website\" as const,\n      },\n    ];\n    \n    defaultResources.forEach(resource => {\n      resourceStorage.create(resource);\n    });\n  }\n  \n  // Update last active date if user exists\n  userProfileStorage.updateLastActive();\n};\n","size_bytes":18105},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/dashboard.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Plus } from 'lucide-react';\nimport { DashboardOverview } from '@/components/dashboard/dashboard-overview';\nimport { SubjectProgress } from '@/components/dashboard/subject-progress';\nimport { StudyTimer } from '@/components/dashboard/study-timer';\nimport { TodaysSchedule } from '@/components/dashboard/todays-schedule';\nimport { QuickResources } from '@/components/dashboard/quick-resources';\nimport { RecentActivity } from '@/components/dashboard/recent-activity';\nimport { SimpleTaskModal } from '@/components/new-modals/simple-task-modal';\nimport { SimpleResourceModal } from '@/components/new-modals/simple-resource-modal';\n\nimport { Button } from '@/components/ui/button';\nimport type { UserProfile, WeeklyProgress } from '@/lib/storage';\nimport { weeklyProgressStorage } from '@/lib/storage';\n\ninterface DashboardProps {\n  userProfile: UserProfile | null;\n}\n\nexport default function Dashboard({ userProfile }: DashboardProps) {\n  const [isTaskModalOpen, setIsTaskModalOpen] = useState(false);\n  const [isResourceModalOpen, setIsResourceModalOpen] = useState(false);\n  const [refreshKey, setRefreshKey] = useState(0);\n  const [weeklyProgress, setWeeklyProgress] = useState<WeeklyProgress | null>(null);\n\n  // Load weekly progress data\n  useEffect(() => {\n    const loadProgress = () => {\n      const progress = weeklyProgressStorage.get();\n      setWeeklyProgress(progress);\n    };\n    \n    loadProgress();\n  }, [refreshKey]);\n\n  const handleTaskCreated = () => {\n    setRefreshKey(prev => prev + 1);\n  };\n\n  const handleResourceCreated = () => {\n    setRefreshKey(prev => prev + 1);\n  };\n\n  const handleTaskUpdate = () => {\n    setRefreshKey(prev => prev + 1);\n  };\n\n  return (\n    <div className=\"space-y-8 animate-fade-in\">\n      <DashboardOverview \n        onAddTask={() => setIsTaskModalOpen(true)} \n        userProfile={userProfile}\n      />\n      \n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n        {/* Main Content */}\n        <div className=\"lg:col-span-2 space-y-8\">\n          <SubjectProgress \n            key={`subject-${refreshKey}`}\n            onTaskUpdate={handleTaskUpdate} \n          />\n          <RecentActivity key={`activity-${refreshKey}`} />\n        </div>\n\n        {/* Sidebar */}\n        <div className=\"space-y-6\">\n          <StudyTimer />\n          <TodaysSchedule key={`schedule-${refreshKey}`} />\n          <QuickResources \n            key={`resources-${refreshKey}`}\n            onAddResource={() => setIsResourceModalOpen(true)} \n          />\n          \n          {/* Weekly Progress Card */}\n          <div className=\"bg-white rounded-2xl shadow-sm border border-gray-100 p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Weekly Progress</h3>\n            \n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm text-jee-muted\">Physics</span>\n                <span className=\"text-sm font-medium\">{weeklyProgress?.Physics || 0}%</span>\n              </div>\n              <div className=\"bg-gray-200 rounded-full h-2\">\n                <div \n                  className=\"bg-blue-600 h-2 rounded-full progress-bar\" \n                  style={{ width: `${weeklyProgress?.Physics || 0}%` }} \n                />\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm text-jee-muted\">Chemistry</span>\n                <span className=\"text-sm font-medium\">{weeklyProgress?.Chemistry || 0}%</span>\n              </div>\n              <div className=\"bg-gray-200 rounded-full h-2\">\n                <div \n                  className=\"bg-green-600 h-2 rounded-full progress-bar\" \n                  style={{ width: `${weeklyProgress?.Chemistry || 0}%` }} \n                />\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm text-jee-muted\">Mathematics</span>\n                <span className=\"text-sm font-medium\">{weeklyProgress?.Mathematics || 0}%</span>\n              </div>\n              <div className=\"bg-gray-200 rounded-full h-2\">\n                <div \n                  className=\"bg-purple-600 h-2 rounded-full progress-bar\" \n                  style={{ width: `${weeklyProgress?.Mathematics || 0}%` }} \n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Floating Action Button */}\n      <div className=\"fixed bottom-8 right-8 z-50\">\n        <Button\n          onClick={() => setIsTaskModalOpen(true)}\n          size=\"lg\"\n          className=\"w-14 h-14 bg-gradient-to-r from-jee-primary to-jee-accent text-white rounded-full shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-200 animate-float\"\n          data-testid=\"fab-add-task\"\n        >\n          <Plus size={24} />\n        </Button>\n      </div>\n      \n      \n      {/* Modals */}\n      <SimpleTaskModal\n        open={isTaskModalOpen}\n        onClose={() => setIsTaskModalOpen(false)}\n        onTaskCreated={handleTaskCreated}\n      />\n      \n      <SimpleResourceModal\n        open={isResourceModalOpen}\n        onClose={() => setIsResourceModalOpen(false)}\n        onResourceCreated={handleResourceCreated}\n      />\n    </div>\n  );\n}\n","size_bytes":5353},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/resources.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Plus, Search, ExternalLink, Book, Video, Calculator, FileText, Trash2, Edit, Filter } from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport { SimpleResourceModal } from '@/components/new-modals/simple-resource-modal';\nimport { SimpleConfirmationDialog } from '@/components/new-modals/simple-confirmation-dialog';\nimport { resourceStorage } from '@/lib/storage';\nimport { useToast } from '@/hooks/use-toast';\nimport type { Resource, Subject } from '@shared/schema';\n\nconst categoryIcons = {\n  book: Book,\n  video: Video,\n  tool: Calculator,\n  pdf: FileText,\n  website: ExternalLink,\n};\n\nconst categoryColors = {\n  book: 'bg-blue-100 text-blue-600 border-blue-200',\n  video: 'bg-green-100 text-green-600 border-green-200',\n  tool: 'bg-purple-100 text-purple-600 border-purple-200',\n  pdf: 'bg-red-100 text-red-600 border-red-200',\n  website: 'bg-gray-100 text-gray-600 border-gray-200',\n};\n\nconst subjectColors = {\n  Physics: 'bg-blue-100 text-blue-800 border-blue-200',\n  Chemistry: 'bg-green-100 text-green-800 border-green-200',\n  Mathematics: 'bg-purple-100 text-purple-800 border-purple-200',\n  General: 'bg-gray-100 text-gray-800 border-gray-200',\n};\n\nexport default function Resources() {\n  const [resources, setResources] = useState<Resource[]>([]);\n  const [filteredResources, setFilteredResources] = useState<Resource[]>([]);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedSubject, setSelectedSubject] = useState<Subject | 'General' | 'All'>('All');\n  const [selectedCategory, setSelectedCategory] = useState<string>('All');\n  const [isResourceModalOpen, setIsResourceModalOpen] = useState(false);\n  const [deleteConfirmation, setDeleteConfirmation] = useState<{ open: boolean; resourceId?: string; resourceTitle?: string }>({\n    open: false,\n  });\n  const { toast } = useToast();\n\n  useEffect(() => {\n    loadResources();\n  }, []);\n\n  useEffect(() => {\n    filterResources();\n  }, [resources, searchQuery, selectedSubject, selectedCategory]);\n\n  const loadResources = () => {\n    const allResources = resourceStorage.getAll();\n    setResources(allResources);\n  };\n\n  const handleResourceCreated = () => {\n    loadResources();\n  };\n\n  const handleDeleteResource = (id: string, title: string) => {\n    setDeleteConfirmation({\n      open: true,\n      resourceId: id,\n      resourceTitle: title,\n    });\n  };\n\n  const confirmDeleteResource = () => {\n    if (deleteConfirmation.resourceId) {\n      const success = resourceStorage.delete(deleteConfirmation.resourceId);\n      if (success) {\n        toast({\n          title: 'Resource Deleted',\n          description: `Resource \"${deleteConfirmation.resourceTitle}\" has been deleted successfully.`,\n        });\n        loadResources();\n      } else {\n        toast({\n          title: 'Error',\n          description: 'Failed to delete resource. Please try again.',\n          variant: 'destructive',\n        });\n      }\n    }\n  };\n\n  const filterResources = () => {\n    let filtered = resources;\n\n    // Filter by search query\n    if (searchQuery) {\n      filtered = filtered.filter(resource =>\n        resource.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        resource.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        resource.url.toLowerCase().includes(searchQuery.toLowerCase())\n      );\n    }\n\n    // Filter by subject\n    if (selectedSubject !== 'All') {\n      filtered = filtered.filter(resource => resource.subject === selectedSubject);\n    }\n\n    // Filter by category\n    if (selectedCategory !== 'All') {\n      filtered = filtered.filter(resource => resource.category === selectedCategory);\n    }\n\n    setFilteredResources(filtered);\n  };\n\n  const handleResourceClick = (url: string) => {\n    window.open(url, '_blank', 'noopener,noreferrer');\n  };\n\n  const getResourceStats = () => {\n    const bySubject = resources.reduce((acc, resource) => {\n      acc[resource.subject] = (acc[resource.subject] || 0) + 1;\n      return acc;\n    }, {} as Record<string, number>);\n\n    const byCategory = resources.reduce((acc, resource) => {\n      acc[resource.category] = (acc[resource.category] || 0) + 1;\n      return acc;\n    }, {} as Record<string, number>);\n\n    return { bySubject, byCategory, total: resources.length };\n  };\n\n  const stats = getResourceStats();\n\n  return (\n    <div className=\"space-y-6 animate-fade-in\">\n      {/* Header */}\n      <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground mb-2\">Resources</h1>\n          <p className=\"text-muted-foreground\">Organize and access your study materials and helpful links</p>\n        </div>\n        <Button\n          onClick={() => setIsResourceModalOpen(true)}\n          className=\"mt-4 lg:mt-0 bg-primary text-primary-foreground px-6 py-3 rounded-xl font-medium hover:bg-primary/90 transition-all duration-200 shadow-lg hover:shadow-xl transform hover:-translate-y-1\"\n          data-testid=\"button-add-resource\"\n        >\n          <Plus className=\"mr-2\" size={18} />\n          Add New Resource\n        </Button>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card className=\"p-4 bg-card border-border\">\n          <CardContent className=\"p-0\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Total Resources</p>\n                <p className=\"text-2xl font-bold text-foreground\">{stats.total}</p>\n              </div>\n              <div className=\"w-10 h-10 bg-blue-50 dark:bg-blue-900/20 rounded-lg flex items-center justify-center\">\n                <ExternalLink className=\"text-blue-600 dark:text-blue-400\" size={20} />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"p-4 bg-card border-border\">\n          <CardContent className=\"p-0\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Videos</p>\n                <p className=\"text-2xl font-bold text-green-600 dark:text-green-400\">{stats.byCategory.video || 0}</p>\n              </div>\n              <div className=\"w-10 h-10 bg-green-50 dark:bg-green-900/20 rounded-lg flex items-center justify-center\">\n                <Video className=\"text-green-600 dark:text-green-400\" size={20} />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"p-4 bg-card border-border\">\n          <CardContent className=\"p-0\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Books</p>\n                <p className=\"text-2xl font-bold text-purple-600 dark:text-purple-400\">{stats.byCategory.book || 0}</p>\n              </div>\n              <div className=\"w-10 h-10 bg-purple-50 dark:bg-purple-900/20 rounded-lg flex items-center justify-center\">\n                <Book className=\"text-purple-600 dark:text-purple-400\" size={20} />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"p-4 bg-card border-border\">\n          <CardContent className=\"p-0\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Websites</p>\n                <p className=\"text-2xl font-bold text-muted-foreground\">{stats.byCategory.website || 0}</p>\n              </div>\n              <div className=\"w-10 h-10 bg-muted rounded-lg flex items-center justify-center\">\n                <ExternalLink className=\"text-muted-foreground\" size={20} />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <Card className=\"p-6\">\n        <div className=\"flex flex-col lg:flex-row gap-4\">\n          <div className=\"flex-1\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={18} />\n              <Input\n                placeholder=\"Search resources...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-10\"\n                data-testid=\"input-search-resources\"\n              />\n            </div>\n          </div>\n          \n          <div className=\"flex gap-2\">\n            <select\n              value={selectedSubject}\n              onChange={(e) => setSelectedSubject(e.target.value as Subject | 'General' | 'All')}\n              className=\"px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-jee-primary\"\n              data-testid=\"select-filter-subject\"\n            >\n              <option value=\"All\">All Subjects</option>\n              <option value=\"Physics\">Physics</option>\n              <option value=\"Chemistry\">Chemistry</option>\n              <option value=\"Mathematics\">Mathematics</option>\n              <option value=\"General\">General</option>\n            </select>\n\n            <select\n              value={selectedCategory}\n              onChange={(e) => setSelectedCategory(e.target.value)}\n              className=\"px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-jee-primary\"\n              data-testid=\"select-filter-category\"\n            >\n              <option value=\"All\">All Categories</option>\n              <option value=\"video\">Videos</option>\n              <option value=\"book\">Books</option>\n              <option value=\"pdf\">PDFs</option>\n              <option value=\"website\">Websites</option>\n              <option value=\"tool\">Tools</option>\n            </select>\n          </div>\n        </div>\n      </Card>\n\n      {/* Resources Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {filteredResources.length === 0 ? (\n          <div className=\"col-span-full\">\n            <Card className=\"p-12\">\n              <div className=\"text-center\">\n                <ExternalLink className=\"mx-auto mb-4 text-gray-400\" size={48} />\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No resources found</h3>\n                <p className=\"text-jee-muted mb-4\">\n                  {resources.length === 0 \n                    ? \"Add your first resource to build your study library!\"\n                    : \"Try adjusting your search or filter criteria.\"\n                  }\n                </p>\n                {resources.length === 0 && (\n                  <Button\n                    onClick={() => setIsResourceModalOpen(true)}\n                    className=\"bg-primary text-primary-foreground hover:bg-primary/90\"\n                  >\n                    <Plus className=\"mr-2\" size={16} />\n                    Add Your First Resource\n                  </Button>\n                )}\n              </div>\n            </Card>\n          </div>\n        ) : (\n          filteredResources.map((resource) => {\n            const IconComponent = categoryIcons[resource.category];\n            const categoryColor = categoryColors[resource.category];\n            const subjectColor = subjectColors[resource.subject];\n            \n            return (\n              <Card\n                key={resource.id}\n                className=\"group hover:shadow-lg transition-all duration-200 cursor-pointer animate-scale-in\"\n                data-testid={`resource-card-${resource.id}`}\n              >\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-start justify-between mb-4\">\n                    <div className={`w-12 h-12 rounded-xl flex items-center justify-center ${categoryColor}`}>\n                      <IconComponent size={20} />\n                    </div>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        handleDeleteResource(resource.id, resource.title);\n                      }}\n                      className=\"opacity-0 group-hover:opacity-100 transition-opacity text-red-500 hover:text-red-700\"\n                      data-testid={`button-delete-${resource.id}`}\n                    >\n                      <Trash2 size={16} />\n                    </Button>\n                  </div>\n                  \n                  <div\n                    onClick={() => handleResourceClick(resource.url)}\n                    className=\"cursor-pointer\"\n                  >\n                    <h3 className=\"font-semibold text-foreground mb-2 group-hover:text-primary transition-colors\">\n                      {resource.title}\n                    </h3>\n                    \n                    {resource.description && (\n                      <p className=\"text-sm text-muted-foreground mb-4 line-clamp-2\">\n                        {resource.description}\n                      </p>\n                    )}\n                    \n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex gap-2\">\n                        <Badge className={subjectColor}>\n                          {resource.subject}\n                        </Badge>\n                        <Badge className={categoryColor}>\n                          {resource.category}\n                        </Badge>\n                      </div>\n                      <ExternalLink \n                        size={16} \n                        className=\"text-muted-foreground group-hover:text-primary transition-colors\" \n                      />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })\n        )}\n      </div>\n\n      {/* Resource Modal */}\n      <SimpleResourceModal\n        open={isResourceModalOpen}\n        onClose={() => setIsResourceModalOpen(false)}\n        onResourceCreated={handleResourceCreated}\n      />\n\n      {/* Confirmation Dialog */}\n      <SimpleConfirmationDialog\n        open={deleteConfirmation.open}\n        onClose={() => setDeleteConfirmation({ ...deleteConfirmation, open: false })}\n        onConfirm={confirmDeleteResource}\n        title=\"Delete Resource\"\n        description={`Are you sure you want to delete \"${deleteConfirmation.resourceTitle}\"? This action cannot be undone.`}\n        confirmText=\"Delete\"\n        cancelText=\"Cancel\"\n        variant=\"destructive\"\n        icon=\"delete\"\n      />\n    </div>\n  );\n}","size_bytes":14881},"client/src/pages/subjects.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Atom, FlaskConical, Calculator, Plus, TrendingUp, Clock, CheckCircle } from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Progress } from '@/components/ui/progress';\nimport { Badge } from '@/components/ui/badge';\nimport { SimpleTaskModal } from '@/components/new-modals/simple-task-modal';\nimport { taskStorage, studySessionStorage, userStatsStorage } from '@/lib/storage';\nimport type { Subject, Task } from '@shared/schema';\n\nconst subjectConfig = {\n  Physics: {\n    icon: Atom,\n    color: 'blue',\n    bgGradient: 'from-blue-500 to-blue-600',\n    lightBg: 'bg-blue-50',\n    description: 'Master the fundamental laws of nature and their applications',\n    topics: ['Mechanics', 'Thermodynamics', 'Electromagnetism', 'Optics', 'Modern Physics'],\n  },\n  Chemistry: {\n    icon: FlaskConical,\n    color: 'green',\n    bgGradient: 'from-green-500 to-green-600',\n    lightBg: 'bg-green-50',\n    description: 'Explore the composition, structure, and properties of matter',\n    topics: ['Organic Chemistry', 'Inorganic Chemistry', 'Physical Chemistry', 'Environmental Chemistry'],\n  },\n  Mathematics: {\n    icon: Calculator,\n    color: 'purple',\n    bgGradient: 'from-purple-500 to-purple-600',\n    lightBg: 'bg-purple-50',\n    description: 'Develop logical thinking and problem-solving skills',\n    topics: ['Algebra', 'Calculus', 'Geometry', 'Trigonometry', 'Statistics & Probability'],\n  },\n};\n\nexport default function Subjects() {\n  const [selectedSubject, setSelectedSubject] = useState<Subject>('Physics');\n  const [isTaskModalOpen, setIsTaskModalOpen] = useState(false);\n  const [tasks, setTasks] = useState<Task[]>([]);\n\n  useEffect(() => {\n    loadTasks();\n  }, []);\n\n  const loadTasks = () => {\n    setTasks(taskStorage.getAll());\n  };\n\n  const getSubjectStats = (subject: Subject) => {\n    const subjectTasks = tasks.filter(task => task.subject === subject);\n    const completedTasks = subjectTasks.filter(task => task.status === 'completed');\n    const sessions = studySessionStorage.getBySubject(subject);\n    const totalStudyTime = sessions.reduce((acc, session) => acc + session.duration, 0);\n    \n    const progress = subjectTasks.length > 0 ? (completedTasks.length / subjectTasks.length) * 100 : 0;\n    \n    return {\n      totalTasks: subjectTasks.length,\n      completedTasks: completedTasks.length,\n      progress: Math.round(progress),\n      totalStudyTime: Math.round(totalStudyTime / 60 * 10) / 10, // Convert to hours\n      recentTasks: subjectTasks.slice(0, 5),\n    };\n  };\n\n  const handleTaskCreated = () => {\n    loadTasks();\n  };\n\n  const overallStats = userStatsStorage.get();\n\n  return (\n    <div className=\"space-y-6 animate-fade-in\">\n      {/* Header */}\n      <div>\n        <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Subjects</h1>\n        <p className=\"text-jee-muted\">Track your progress across Physics, Chemistry, and Mathematics</p>\n      </div>\n\n      {/* Subject Overview Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        {(Object.keys(subjectConfig) as Subject[]).map((subject) => {\n          const config = subjectConfig[subject];\n          const stats = getSubjectStats(subject);\n          const IconComponent = config.icon;\n          \n          return (\n            <Card\n              key={subject}\n              className={`cursor-pointer transition-all duration-300 hover:shadow-lg transform hover:-translate-y-1 ${\n                selectedSubject === subject ? 'ring-2 ring-jee-primary' : ''\n              }`}\n              onClick={() => setSelectedSubject(subject)}\n              data-testid={`subject-card-${subject.toLowerCase()}`}\n            >\n              <CardContent className=\"p-6\">\n                <div className={`w-full h-32 bg-gradient-to-br ${config.bgGradient} rounded-xl mb-4 flex items-center justify-center`}>\n                  <IconComponent className=\"text-white\" size={48} />\n                </div>\n                \n                <h3 className=\"text-xl font-bold text-gray-900 mb-2\">{subject}</h3>\n                <p className=\"text-sm text-jee-muted mb-4\">{config.description}</p>\n                \n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between text-sm\">\n                    <span className=\"text-jee-muted\">Progress</span>\n                    <span className=\"font-semibold text-gray-900\">{stats.progress}%</span>\n                  </div>\n                  <Progress value={stats.progress} className=\"h-2\" />\n                  \n                  <div className=\"grid grid-cols-2 gap-4 pt-2\">\n                    <div className=\"text-center\">\n                      <p className=\"text-lg font-bold text-gray-900\">{stats.completedTasks}</p>\n                      <p className=\"text-xs text-jee-muted\">Completed</p>\n                    </div>\n                    <div className=\"text-center\">\n                      <p className=\"text-lg font-bold text-gray-900\">{stats.totalStudyTime}h</p>\n                      <p className=\"text-xs text-jee-muted\">Study Time</p>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n\n      {/* Selected Subject Details */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Subject Details */}\n        <div className=\"lg:col-span-2 space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-3\">\n                {(() => {\n                  const IconComponent = subjectConfig[selectedSubject].icon;\n                  return <IconComponent className={`text-${subjectConfig[selectedSubject].color}-600`} size={24} />;\n                })()}\n                <span>{selectedSubject} Details</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-6\">\n                {/* Topics */}\n                <div>\n                  <h4 className=\"font-semibold text-gray-900 mb-3\">Key Topics</h4>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {subjectConfig[selectedSubject].topics.map((topic) => (\n                      <Badge\n                        key={topic}\n                        variant=\"outline\"\n                        className={`${subjectConfig[selectedSubject].lightBg} border-${subjectConfig[selectedSubject].color}-200`}\n                      >\n                        {topic}\n                      </Badge>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Recent Tasks */}\n                <div>\n                  <div className=\"flex items-center justify-between mb-3\">\n                    <h4 className=\"font-semibold text-gray-900\">Recent Tasks</h4>\n                    <Button\n                      onClick={() => setIsTaskModalOpen(true)}\n                      size=\"sm\"\n                      variant=\"outline\"\n                      className=\"text-jee-primary hover:text-blue-700\"\n                      data-testid=\"button-add-subject-task\"\n                    >\n                      <Plus size={16} className=\"mr-1\" />\n                      Add Task\n                    </Button>\n                  </div>\n                  \n                  <div className=\"space-y-3\">\n                    {(() => {\n                      const stats = getSubjectStats(selectedSubject);\n                      return stats.recentTasks.length === 0 ? (\n                        <div className=\"text-center py-8 text-jee-muted\">\n                          <CheckCircle className=\"mx-auto mb-3 opacity-50\" size={24} />\n                          <p className=\"text-sm\">No tasks for {selectedSubject} yet</p>\n                          <p className=\"text-xs\">Create your first task to get started!</p>\n                        </div>\n                      ) : (\n                        stats.recentTasks.map((task) => (\n                          <div\n                            key={task.id}\n                            className={`p-3 rounded-lg border transition-all hover:shadow-sm ${subjectConfig[selectedSubject].lightBg}`}\n                            data-testid={`subject-task-${task.id}`}\n                          >\n                            <div className=\"flex items-center justify-between\">\n                              <div>\n                                <p className={`font-medium ${task.status === 'completed' ? 'line-through text-gray-500' : 'text-gray-900'}`}>\n                                  {task.title}\n                                </p>\n                                <p className=\"text-xs text-jee-muted\">\n                                  Due: {new Date(task.dueDate).toLocaleDateString()}\n                                </p>\n                              </div>\n                              <Badge\n                                className={\n                                  task.status === 'completed'\n                                    ? 'bg-green-100 text-green-800'\n                                    : task.status === 'in-progress'\n                                    ? 'bg-yellow-100 text-yellow-800'\n                                    : 'bg-gray-100 text-gray-800'\n                                }\n                              >\n                                {task.status}\n                              </Badge>\n                            </div>\n                          </div>\n                        ))\n                      );\n                    })()}\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Subject Stats Sidebar */}\n        <div className=\"space-y-6\">\n          {/* Progress Stats */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Progress Statistics</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {(() => {\n                const stats = getSubjectStats(selectedSubject);\n                return (\n                  <>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm text-jee-muted\">Total Tasks</span>\n                      <span className=\"font-semibold\">{stats.totalTasks}</span>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm text-jee-muted\">Completed</span>\n                      <span className=\"font-semibold text-green-600\">{stats.completedTasks}</span>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm text-jee-muted\">Study Hours</span>\n                      <span className=\"font-semibold text-blue-600\">{stats.totalStudyTime}h</span>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm text-jee-muted\">Completion Rate</span>\n                      <span className=\"font-semibold\">{stats.progress}%</span>\n                    </div>\n                  </>\n                );\n              })()}\n            </CardContent>\n          </Card>\n\n          {/* Overall Progress Comparison */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Subject Comparison</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {(Object.keys(subjectConfig) as Subject[]).map((subject) => {\n                const stats = getSubjectStats(subject);\n                const config = subjectConfig[subject];\n                \n                return (\n                  <div key={subject} className=\"space-y-2\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm font-medium\">{subject}</span>\n                      <span className=\"text-sm text-jee-muted\">{stats.progress}%</span>\n                    </div>\n                    <Progress \n                      value={stats.progress} \n                      className={`h-2 [&>div]:bg-${config.color}-600`}\n                    />\n                  </div>\n                );\n              })}\n            </CardContent>\n          </Card>\n\n          {/* Study Streak */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg flex items-center\">\n                <TrendingUp className=\"mr-2\" size={18} />\n                Study Streak\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold text-jee-primary mb-2\">\n                  {overallStats.currentStreak}\n                </div>\n                <p className=\"text-sm text-jee-muted\">Days in a row</p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      {/* Task Modal */}\n      <SimpleTaskModal\n        open={isTaskModalOpen}\n        onClose={() => setIsTaskModalOpen(false)}\n        onTaskCreated={handleTaskCreated}\n      />\n    </div>\n  );\n}","size_bytes":13368},"client/src/pages/tasks.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Plus, Search, Filter, MoreHorizontal, CheckCircle, Clock, AlertCircle, Trash2 } from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { SimpleTaskModal } from '@/components/new-modals/simple-task-modal';\nimport { taskStorage } from '@/lib/storage';\nimport type { Task, Subject } from '@shared/schema';\n\nconst subjectColors = {\n  Physics: 'bg-blue-100 text-blue-800 border-blue-200',\n  Chemistry: 'bg-green-100 text-green-800 border-green-200',\n  Mathematics: 'bg-purple-100 text-purple-800 border-purple-200',\n};\n\nconst statusConfig = {\n  completed: { \n    label: 'Completed', \n    icon: CheckCircle, \n    className: 'bg-green-100 text-green-800 border-green-200' \n  },\n  'in-progress': { \n    label: 'In Progress', \n    icon: Clock, \n    className: 'bg-yellow-100 text-yellow-800 border-yellow-200' \n  },\n  pending: { \n    label: 'Pending', \n    icon: Clock, \n    className: 'bg-gray-100 text-gray-800 border-gray-200' \n  },\n  overdue: { \n    label: 'Overdue', \n    icon: AlertCircle, \n    className: 'bg-red-100 text-red-800 border-red-200' \n  },\n};\n\nexport default function Tasks() {\n  const [tasks, setTasks] = useState<Task[]>([]);\n  const [filteredTasks, setFilteredTasks] = useState<Task[]>([]);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedSubject, setSelectedSubject] = useState<Subject | 'All'>('All');\n  const [selectedStatus, setSelectedStatus] = useState<string>('All');\n  const [isTaskModalOpen, setIsTaskModalOpen] = useState(false);\n\n  useEffect(() => {\n    loadTasks();\n  }, []);\n\n  useEffect(() => {\n    filterTasks();\n  }, [tasks, searchQuery, selectedSubject, selectedStatus]);\n\n  const loadTasks = () => {\n    const allTasks = taskStorage.getAll();\n    setTasks(allTasks);\n  };\n\n  const filterTasks = () => {\n    let filtered = tasks;\n\n    // Filter by search query\n    if (searchQuery) {\n      filtered = filtered.filter(task =>\n        task.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        task.description?.toLowerCase().includes(searchQuery.toLowerCase())\n      );\n    }\n\n    // Filter by subject\n    if (selectedSubject !== 'All') {\n      filtered = filtered.filter(task => task.subject === selectedSubject);\n    }\n\n    // Filter by status\n    if (selectedStatus !== 'All') {\n      filtered = filtered.filter(task => task.status === selectedStatus);\n    }\n\n    setFilteredTasks(filtered);\n  };\n\n  const handleTaskToggle = (taskId: string, completed: boolean) => {\n    const updates = { status: completed ? 'completed' as const : 'pending' as const };\n    const updatedTask = taskStorage.update(taskId, updates);\n    \n    if (updatedTask) {\n      loadTasks();\n    }\n  };\n\n  const handleTaskCreated = () => {\n    loadTasks();\n  };\n\n  const handleDeleteTask = (taskId: string) => {\n    if (window.confirm('Are you sure you want to delete this task?')) {\n      const success = taskStorage.delete(taskId);\n      if (success) {\n        loadTasks();\n      }\n    }\n  };\n\n  const getTaskStatus = (task: Task): keyof typeof statusConfig => {\n    if (task.status === 'completed') return 'completed';\n    if (task.status === 'in-progress') return 'in-progress';\n    \n    const now = new Date();\n    const dueDate = new Date(task.dueDate);\n    \n    if (dueDate < now) return 'overdue';\n    \n    return 'pending';\n  };\n\n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString);\n    return date.toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric',\n      year: date.getFullYear() !== new Date().getFullYear() ? 'numeric' : undefined,\n    });\n  };\n\n  const taskStats = {\n    total: tasks.length,\n    completed: tasks.filter(task => task.status === 'completed').length,\n    pending: tasks.filter(task => task.status !== 'completed').length,\n    overdue: tasks.filter(task => {\n      const now = new Date();\n      const dueDate = new Date(task.dueDate);\n      return dueDate < now && task.status !== 'completed';\n    }).length,\n  };\n\n  return (\n    <div className=\"space-y-6 animate-fade-in\">\n      {/* Header */}\n      <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Tasks</h1>\n          <p className=\"text-jee-muted\">Manage your study tasks and track progress</p>\n        </div>\n        <Button\n          onClick={() => setIsTaskModalOpen(true)}\n          className=\"mt-4 lg:mt-0 bg-jee-primary text-white px-6 py-3 rounded-xl font-medium hover:bg-blue-700 transition-all duration-200 shadow-lg hover:shadow-xl transform hover:-translate-y-1\"\n          data-testid=\"button-add-task\"\n        >\n          <Plus className=\"mr-2\" size={18} />\n          Add New Task\n        </Button>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card className=\"p-4\">\n          <CardContent className=\"p-0\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-jee-muted\">Total Tasks</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{taskStats.total}</p>\n              </div>\n              <div className=\"w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center\">\n                <CheckCircle className=\"text-blue-600\" size={20} />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"p-4\">\n          <CardContent className=\"p-0\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-jee-muted\">Completed</p>\n                <p className=\"text-2xl font-bold text-green-600\">{taskStats.completed}</p>\n              </div>\n              <div className=\"w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center\">\n                <CheckCircle className=\"text-green-600\" size={20} />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"p-4\">\n          <CardContent className=\"p-0\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-jee-muted\">Pending</p>\n                <p className=\"text-2xl font-bold text-yellow-600\">{taskStats.pending}</p>\n              </div>\n              <div className=\"w-10 h-10 bg-yellow-100 rounded-lg flex items-center justify-center\">\n                <Clock className=\"text-yellow-600\" size={20} />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"p-4\">\n          <CardContent className=\"p-0\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-jee-muted\">Overdue</p>\n                <p className=\"text-2xl font-bold text-red-600\">{taskStats.overdue}</p>\n              </div>\n              <div className=\"w-10 h-10 bg-red-100 rounded-lg flex items-center justify-center\">\n                <AlertCircle className=\"text-red-600\" size={20} />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <Card className=\"p-6\">\n        <div className=\"flex flex-col lg:flex-row gap-4\">\n          <div className=\"flex-1\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={18} />\n              <Input\n                placeholder=\"Search tasks...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-10\"\n                data-testid=\"input-search-tasks\"\n              />\n            </div>\n          </div>\n          \n          <div className=\"flex gap-2\">\n            <select\n              value={selectedSubject}\n              onChange={(e) => setSelectedSubject(e.target.value as Subject | 'All')}\n              className=\"px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-jee-primary\"\n              data-testid=\"select-filter-subject\"\n            >\n              <option value=\"All\">All Subjects</option>\n              <option value=\"Physics\">Physics</option>\n              <option value=\"Chemistry\">Chemistry</option>\n              <option value=\"Mathematics\">Mathematics</option>\n            </select>\n\n            <select\n              value={selectedStatus}\n              onChange={(e) => setSelectedStatus(e.target.value)}\n              className=\"px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-jee-primary\"\n              data-testid=\"select-filter-status\"\n            >\n              <option value=\"All\">All Status</option>\n              <option value=\"pending\">Pending</option>\n              <option value=\"in-progress\">In Progress</option>\n              <option value=\"completed\">Completed</option>\n              <option value=\"overdue\">Overdue</option>\n            </select>\n          </div>\n        </div>\n      </Card>\n\n      {/* Tasks List */}\n      <div className=\"space-y-4\">\n        {filteredTasks.length === 0 ? (\n          <Card className=\"p-12\">\n            <div className=\"text-center\">\n              <CheckCircle className=\"mx-auto mb-4 text-gray-400\" size={48} />\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No tasks found</h3>\n              <p className=\"text-jee-muted mb-4\">\n                {tasks.length === 0 \n                  ? \"Create your first task to get started with your JEE preparation!\"\n                  : \"Try adjusting your search or filter criteria.\"\n                }\n              </p>\n              {tasks.length === 0 && (\n                <Button\n                  onClick={() => setIsTaskModalOpen(true)}\n                  className=\"bg-jee-primary text-white\"\n                >\n                  <Plus className=\"mr-2\" size={16} />\n                  Add Your First Task\n                </Button>\n              )}\n            </div>\n          </Card>\n        ) : (\n          filteredTasks.map((task) => {\n            const status = getTaskStatus(task);\n            const statusInfo = statusConfig[status];\n            const StatusIcon = statusInfo.icon;\n            \n            return (\n              <Card\n                key={task.id}\n                className=\"p-6 hover:shadow-md transition-all duration-200 animate-slide-up\"\n                data-testid={`task-card-${task.id}`}\n              >\n                <div className=\"flex items-start space-x-4\">\n                  <Checkbox\n                    checked={task.status === 'completed'}\n                    onCheckedChange={(checked) => handleTaskToggle(task.id, !!checked)}\n                    className=\"mt-1\"\n                    data-testid={`checkbox-task-${task.id}`}\n                  />\n                  \n                  <div className=\"flex-1\">\n                    <div className=\"flex items-start justify-between mb-3\">\n                      <div>\n                        <h3 \n                          className={`text-lg font-semibold ${\n                            task.status === 'completed' ? 'line-through text-gray-500' : 'text-gray-900'\n                          }`}\n                        >\n                          {task.title}\n                        </h3>\n                        {task.description && (\n                          <p className=\"text-sm text-jee-muted mt-1\">{task.description}</p>\n                        )}\n                      </div>\n                      \n                      <div className=\"flex items-center space-x-2\">\n                        <Badge className={statusInfo.className}>\n                          <StatusIcon size={12} className=\"mr-1\" />\n                          {statusInfo.label}\n                        </Badge>\n                        <Badge className={subjectColors[task.subject]}>\n                          {task.subject}\n                        </Badge>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleDeleteTask(task.id)}\n                          className=\"h-8 w-8 p-0 text-red-500 hover:text-red-700 hover:bg-red-50\"\n                          data-testid={`button-delete-task-${task.id}`}\n                          title=\"Delete task\"\n                        >\n                          <Trash2 size={14} />\n                        </Button>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-4 text-sm text-jee-muted\">\n                        <span>Due: {formatDate(task.dueDate)}</span>\n                        <span>Priority: {task.priority}</span>\n                        {task.estimatedTime && (\n                          <span>Est: {task.estimatedTime}min</span>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </Card>\n            );\n          })\n        )}\n      </div>\n\n      {/* Task Modal */}\n      <SimpleTaskModal\n        open={isTaskModalOpen}\n        onClose={() => setIsTaskModalOpen(false)}\n        onTaskCreated={handleTaskCreated}\n      />\n    </div>\n  );\n}","size_bytes":13666},"client/src/pages/timer.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Play, Pause, Square, RotateCcw, Settings, Clock } from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { useTimer } from '@/hooks/use-timer';\nimport { studySessionStorage, type UserProfile } from '@/lib/storage';\nimport type { Subject } from '@shared/schema';\n\nconst TIMER_PRESETS = [\n  { label: 'Pomodoro', minutes: 25, description: 'Classic 25-minute focus session' },\n  { label: 'Short Break', minutes: 5, description: 'Quick 5-minute break' },\n  { label: 'Long Break', minutes: 15, description: 'Extended 15-minute break' },\n  { label: 'Focus Block', minutes: 45, description: 'Deep focus 45-minute session' },\n  { label: 'Study Hour', minutes: 60, description: 'Full hour study session' },\n  { label: 'Quick Review', minutes: 10, description: '10-minute review session' },\n];\n\ninterface TimerProps {\n  userProfile: UserProfile | null;\n}\n\nexport default function Timer({ userProfile }: TimerProps) {\n  const [selectedSubject, setSelectedSubject] = useState<Subject>(\n    userProfile?.preferences.defaultSubject || 'Physics'\n  );\n  const [selectedPreset, setSelectedPreset] = useState(\n    TIMER_PRESETS.find(p => p.minutes === userProfile?.preferences.defaultTimerDuration) || TIMER_PRESETS[0]\n  );\n  const [sessionStartTime, setSessionStartTime] = useState<string | null>(null);\n  const [sessions, setSessions] = useState(studySessionStorage.getAll());\n  const [customMinutes, setCustomMinutes] = useState(25);\n\n  const {\n    timeLeft,\n    formattedTime,\n    isRunning,\n    isPaused,\n    progress,\n    start,\n    pause,\n    reset,\n    setTime,\n  } = useTimer(selectedPreset.minutes * 60);\n\n  useEffect(() => {\n    setTime(selectedPreset.minutes * 60);\n  }, [selectedPreset, setTime]);\n\n  const handleStart = () => {\n    if (!isRunning && !isPaused) {\n      setSessionStartTime(new Date().toISOString());\n    }\n    start();\n  };\n\n  const handlePause = () => {\n    pause();\n  };\n\n  const handleStop = () => {\n    if (sessionStartTime) {\n      const endTime = new Date().toISOString();\n      const startTime = new Date(sessionStartTime);\n      const endTimeDate = new Date(endTime);\n      const duration = Math.round((endTimeDate.getTime() - startTime.getTime()) / 1000 / 60);\n\n      if (duration > 0) {\n        studySessionStorage.create({\n          subject: selectedSubject,\n          duration,\n          startTime: sessionStartTime,\n          endTime,\n          notes: `${duration} minute ${selectedPreset.label} session`,\n        });\n        setSessions(studySessionStorage.getAll());\n      }\n    }\n    \n    reset();\n    setSessionStartTime(null);\n  };\n\n  const handleReset = () => {\n    reset();\n    setSessionStartTime(null);\n  };\n\n  const handlePresetClick = (preset: typeof TIMER_PRESETS[0]) => {\n    if (!isRunning) {\n      setSelectedPreset(preset);\n    }\n  };\n\n  const handleCustomTime = () => {\n    if (!isRunning && customMinutes > 0) {\n      setTime(customMinutes * 60);\n    }\n  };\n\n  // Calculate stroke dash offset for circular progress\n  const radius = 120;\n  const circumference = 2 * Math.PI * radius;\n  const strokeDashoffset = circumference - (progress * circumference);\n\n  const todaysSessions = sessions.filter(session => {\n    const sessionDate = new Date(session.startTime).toDateString();\n    const today = new Date().toDateString();\n    return sessionDate === today;\n  });\n\n  const todaysStudyTime = todaysSessions.reduce((acc, session) => acc + session.duration, 0);\n\n  return (\n    <div className=\"max-w-4xl mx-auto space-y-6 animate-fade-in\">\n      {/* Header */}\n      <div className=\"text-center\">\n        <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Study Timer</h1>\n        <p className=\"text-jee-muted\">Focus on your studies with structured time management</p>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Timer Section */}\n        <div className=\"lg:col-span-2\">\n          <Card className=\"p-8\">\n            <CardContent className=\"p-0\">\n              {/* Subject Selection */}\n              <div className=\"text-center mb-6\">\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-3\">Study Subject</h3>\n                <div className=\"flex justify-center gap-2\">\n                  {(['Physics', 'Chemistry', 'Mathematics'] as Subject[]).map((subject) => (\n                    <Button\n                      key={subject}\n                      onClick={() => setSelectedSubject(subject)}\n                      disabled={isRunning}\n                      variant={selectedSubject === subject ? 'default' : 'outline'}\n                      className={selectedSubject === subject ? 'jee-primary' : ''}\n                      data-testid={`button-subject-${subject.toLowerCase()}`}\n                    >\n                      {subject}\n                    </Button>\n                  ))}\n                </div>\n              </div>\n\n              {/* Timer Display */}\n              <div className=\"text-center mb-8\">\n                <div className=\"relative w-80 h-80 mx-auto mb-6\">\n                  <svg className=\"w-80 h-80 transform -rotate-90\" viewBox=\"0 0 280 280\">\n                    <circle\n                      cx=\"140\"\n                      cy=\"140\"\n                      r=\"120\"\n                      stroke=\"#E5E7EB\"\n                      strokeWidth=\"12\"\n                      fill=\"none\"\n                    />\n                    <circle\n                      cx=\"140\"\n                      cy=\"140\"\n                      r=\"120\"\n                      stroke=\"var(--jee-primary)\"\n                      strokeWidth=\"12\"\n                      fill=\"none\"\n                      strokeDasharray={circumference}\n                      strokeDashoffset={strokeDashoffset}\n                      strokeLinecap=\"round\"\n                      className=\"transition-all duration-300\"\n                      data-testid=\"timer-progress-circle\"\n                    />\n                  </svg>\n                  <div className=\"absolute inset-0 flex items-center justify-center\">\n                    <div className=\"text-center\">\n                      <div \n                        className=\"text-5xl font-bold text-gray-900 mb-2\"\n                        data-testid=\"timer-display\"\n                      >\n                        {formattedTime}\n                      </div>\n                      <div className=\"text-lg text-jee-muted\">{selectedPreset.label}</div>\n                      <div className=\"text-sm text-jee-muted\">{selectedSubject}</div>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Timer Controls */}\n                <div className=\"flex justify-center space-x-4\">\n                  <Button\n                    onClick={handleStart}\n                    disabled={isRunning}\n                    size=\"lg\"\n                    className=\"w-16 h-16 rounded-full jee-primary hover:bg-blue-700 transition-all transform hover:scale-105\"\n                    data-testid=\"button-timer-start\"\n                  >\n                    <Play size={24} />\n                  </Button>\n                  <Button\n                    onClick={handlePause}\n                    disabled={!isRunning}\n                    variant=\"outline\"\n                    size=\"lg\"\n                    className=\"w-16 h-16 rounded-full\"\n                    data-testid=\"button-timer-pause\"\n                  >\n                    <Pause size={24} />\n                  </Button>\n                  <Button\n                    onClick={handleStop}\n                    disabled={!isRunning && !isPaused}\n                    variant=\"outline\"\n                    size=\"lg\"\n                    className=\"w-16 h-16 rounded-full\"\n                    data-testid=\"button-timer-stop\"\n                  >\n                    <Square size={24} />\n                  </Button>\n                  <Button\n                    onClick={handleReset}\n                    disabled={isRunning}\n                    variant=\"outline\"\n                    size=\"lg\"\n                    className=\"w-16 h-16 rounded-full\"\n                    data-testid=\"button-timer-reset\"\n                  >\n                    <RotateCcw size={24} />\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Sidebar */}\n        <div className=\"space-y-6\">\n          {/* Timer Presets */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Timer Presets</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              {TIMER_PRESETS.map((preset) => (\n                <Button\n                  key={preset.label}\n                  onClick={() => handlePresetClick(preset)}\n                  disabled={isRunning}\n                  variant={selectedPreset.label === preset.label ? 'default' : 'outline'}\n                  className={`w-full text-left justify-start ${\n                    selectedPreset.label === preset.label ? 'jee-primary' : ''\n                  }`}\n                  data-testid={`button-preset-${preset.label.toLowerCase().replace(' ', '-')}`}\n                >\n                  <div>\n                    <div className=\"font-medium\">{preset.label}</div>\n                    <div className=\"text-xs opacity-70\">{preset.description}</div>\n                  </div>\n                </Button>\n              ))}\n              \n              {/* Custom Timer */}\n              <div className=\"pt-2 border-t\">\n                <div className=\"flex gap-2\">\n                  <input\n                    type=\"number\"\n                    min=\"1\"\n                    max=\"120\"\n                    value={customMinutes}\n                    onChange={(e) => setCustomMinutes(parseInt(e.target.value) || 1)}\n                    disabled={isRunning}\n                    className=\"flex-1 px-2 py-1 border border-gray-300 rounded text-sm\"\n                    placeholder=\"Minutes\"\n                    data-testid=\"input-custom-minutes\"\n                  />\n                  <Button\n                    onClick={handleCustomTime}\n                    disabled={isRunning}\n                    size=\"sm\"\n                    variant=\"outline\"\n                    data-testid=\"button-set-custom\"\n                  >\n                    Set\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Today's Progress */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg flex items-center\">\n                <Clock className=\"mr-2\" size={18} />\n                Today's Progress\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-center mb-4\">\n                <div className=\"text-3xl font-bold text-jee-primary mb-1\">\n                  {Math.round(todaysStudyTime / 60 * 10) / 10}h\n                </div>\n                <p className=\"text-sm text-jee-muted\">Total Study Time</p>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-jee-muted\">Sessions</span>\n                  <span className=\"font-medium\">{todaysSessions.length}</span>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-jee-muted\">Average</span>\n                  <span className=\"font-medium\">\n                    {todaysSessions.length > 0 \n                      ? Math.round(todaysStudyTime / todaysSessions.length) \n                      : 0}min\n                  </span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Recent Sessions */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Recent Sessions</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {todaysSessions.length === 0 ? (\n                  <div className=\"text-center py-4 text-jee-muted\">\n                    <Clock className=\"mx-auto mb-2 opacity-50\" size={24} />\n                    <p className=\"text-sm\">No sessions today</p>\n                    <p className=\"text-xs\">Start your first session!</p>\n                  </div>\n                ) : (\n                  todaysSessions.slice(-5).reverse().map((session) => (\n                    <div\n                      key={session.id}\n                      className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\"\n                      data-testid={`session-${session.id}`}\n                    >\n                      <div>\n                        <p className=\"text-sm font-medium\">{session.subject}</p>\n                        <p className=\"text-xs text-jee-muted\">\n                          {new Date(session.startTime).toLocaleTimeString('en-US', {\n                            hour: 'numeric',\n                            minute: '2-digit',\n                            hour12: true,\n                          })}\n                        </p>\n                      </div>\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        {session.duration}min\n                      </Badge>\n                    </div>\n                  ))\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":13701},"client/src/components/dashboard/dashboard-overview.tsx":{"content":"import { Plus, TrendingUp, Target, BookOpen, BarChart3, Trophy, Clock } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Progress } from '@/components/ui/progress';\nimport { taskStorage, userStatsStorage, type UserProfile } from '@/lib/storage';\nimport { useMemo } from 'react';\n\ninterface DashboardOverviewProps {\n  onAddTask: () => void;\n  userProfile: UserProfile | null;\n}\n\nexport function DashboardOverview({ onAddTask, userProfile }: DashboardOverviewProps) {\n  const stats = useMemo(() => {\n    const userStats = userStatsStorage.get();\n    const taskStats = taskStorage.getStats();\n    \n    return {\n      totalTasks: taskStats.total,\n      completedTasks: taskStats.completed,\n      studyHours: Math.round(userStats.totalStudyTime / 60 * 10) / 10, // Convert to hours\n      streak: userStats.currentStreak,\n      completionRate: taskStats.total > 0 ? Math.round((taskStats.completed / taskStats.total) * 100) : 0,\n    };\n  }, []);\n\n  const progressData = [\n    {\n      title: 'Total Tasks',\n      value: stats.totalTasks,\n      progress: Math.min((stats.totalTasks / 20) * 100, 100),\n      icon: Target,\n      change: `${stats.totalTasks} tasks`,\n      color: 'from-blue-500 to-blue-600',\n      bgColor: 'bg-blue-50 dark:bg-blue-900/20',\n      iconColor: 'text-blue-600 dark:text-blue-400',\n    },\n    {\n      title: 'Study Hours',\n      value: `${stats.studyHours}h`,\n      progress: Math.min((stats.studyHours / 10) * 100, 100),\n      icon: Clock,\n      change: `+${stats.studyHours}h total`,\n      color: 'from-green-500 to-green-600',\n      bgColor: 'bg-green-50 dark:bg-green-900/20',\n      iconColor: 'text-green-600 dark:text-green-400',\n    },\n    {\n      title: 'Completion Rate',\n      value: `${stats.completionRate}%`,\n      progress: stats.completionRate,\n      icon: BarChart3,\n      change: `${stats.completionRate}% done`,\n      color: 'from-purple-500 to-purple-600',\n      bgColor: 'bg-purple-50 dark:bg-purple-900/20',\n      iconColor: 'text-purple-600 dark:text-purple-400',\n    },\n    {\n      title: 'Day Streak',\n      value: stats.streak,\n      progress: Math.min((stats.streak / 30) * 100, 100),\n      icon: Trophy,\n      change: `${stats.streak} days`,\n      color: 'from-amber-500 to-amber-600',\n      bgColor: 'bg-amber-50 dark:bg-amber-900/20',\n      iconColor: 'text-amber-600 dark:text-amber-400',\n    },\n  ];\n\n  return (\n    <div className=\"mb-8 animate-fade-in\">\n      <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between mb-6\">\n        <div>\n          <h2 className=\"text-2xl sm:text-3xl font-bold text-foreground mb-2\">\n            Welcome back, <span className=\"text-primary\">{userProfile?.name || 'Student'}</span>!\n          </h2>\n          <p className=\"text-muted-foreground\">Track your JEE preparation progress and stay on top of your goals.</p>\n        </div>\n        <div className=\"mt-4 lg:mt-0\">\n          <Button\n            onClick={onAddTask}\n            className=\"bg-primary text-primary-foreground px-6 py-3 rounded-xl font-medium hover:bg-primary/90 transition-all duration-200 shadow-lg hover:shadow-xl transform hover:-translate-y-1\"\n            data-testid=\"button-add-task\"\n          >\n            <Plus className=\"mr-2\" size={18} />\n            <span className=\"hidden sm:inline\">Add New Task</span>\n            <span className=\"sm:hidden\">Add</span>\n          </Button>\n        </div>\n      </div>\n\n      {/* Progress Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {progressData.map((item, index) => {\n          const IconComponent = item.icon;\n          return (\n            <Card\n              key={item.title}\n              className=\"group relative overflow-hidden p-0 shadow-sm hover:shadow-xl transition-all duration-500 border border-border bg-card hover:scale-105 animate-fade-in\"\n              style={{ animationDelay: `${index * 0.1}s` }}\n            >\n              {/* Gradient Background */}\n              <div className={`absolute inset-0 bg-gradient-to-br ${item.color} opacity-0 group-hover:opacity-10 transition-opacity duration-500`} />\n              \n              <CardContent className=\"p-6 relative z-10\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div className={`w-12 h-12 ${item.bgColor} rounded-xl flex items-center justify-center transition-all duration-300 group-hover:scale-110`}>\n                    <IconComponent size={24} className={`${item.iconColor} transition-colors duration-300`} />\n                  </div>\n                  <div className=\"flex items-center text-sm font-medium text-muted-foreground group-hover:text-foreground transition-colors duration-300\">\n                    <TrendingUp size={14} className=\"mr-1\" />\n                    {item.change}\n                  </div>\n                </div>\n                <h3 className=\"text-2xl font-bold text-foreground mb-1 transition-colors duration-300\" data-testid={`stat-${item.title.toLowerCase().replace(' ', '-')}`}>\n                  {item.value}\n                </h3>\n                <p className=\"text-muted-foreground text-sm mb-4 group-hover:text-foreground/80 transition-colors duration-300\">{item.title}</p>\n                <div className=\"relative\">\n                  <Progress \n                    value={item.progress} \n                    className=\"h-2 bg-muted group-hover:bg-muted/50 transition-all duration-300\"\n                    data-testid={`progress-${item.title.toLowerCase().replace(' ', '-')}`}\n                  />\n                  <div className={`absolute inset-0 h-2 rounded-full bg-gradient-to-r ${item.color} opacity-0 group-hover:opacity-20 transition-opacity duration-500`} \n                       style={{ width: `${item.progress}%` }} />\n                </div>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n","size_bytes":5974},"client/src/components/dashboard/quick-resources.tsx":{"content":"import { useState } from 'react';\nimport { ExternalLink, Book, Video, Calculator, FileText, Plus } from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { resourceStorage } from '@/lib/storage';\nimport type { Resource } from '@shared/schema';\n\nconst categoryIcons = {\n  book: Book,\n  video: Video,\n  tool: Calculator,\n  pdf: FileText,\n  website: ExternalLink,\n};\n\nconst categoryColors = {\n  book: 'bg-blue-100 text-blue-600',\n  video: 'bg-green-100 text-green-600',\n  tool: 'bg-purple-100 text-purple-600',\n  pdf: 'bg-red-100 text-red-600',\n  website: 'bg-gray-100 text-gray-600',\n};\n\ninterface QuickResourcesProps {\n  onAddResource: () => void;\n}\n\nexport function QuickResources({ onAddResource }: QuickResourcesProps) {\n  const [resources] = useState<Resource[]>(resourceStorage.getAll().slice(0, 4));\n\n  const handleResourceClick = (url: string) => {\n    window.open(url, '_blank', 'noopener,noreferrer');\n  };\n\n  return (\n    <Card className=\"shadow-sm border border-gray-100 p-6\">\n      <CardContent className=\"p-0\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <CardTitle className=\"text-lg font-semibold text-gray-900\">\n            Quick Resources\n          </CardTitle>\n          <Button\n            onClick={onAddResource}\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"text-jee-primary hover:text-blue-700 transition-colors\"\n            data-testid=\"button-add-resource\"\n          >\n            <Plus size={16} />\n          </Button>\n        </div>\n        \n        <div className=\"space-y-3\">\n          {resources.length === 0 ? (\n            <div className=\"text-center py-8 text-jee-muted\">\n              <ExternalLink className=\"mx-auto mb-3 opacity-50\" size={24} />\n              <p className=\"text-sm\">No resources yet</p>\n              <p className=\"text-xs\">Add your first resource!</p>\n            </div>\n          ) : (\n            resources.map((resource) => {\n              const IconComponent = categoryIcons[resource.category];\n              const colorClass = categoryColors[resource.category];\n              \n              return (\n                <button\n                  key={resource.id}\n                  onClick={() => handleResourceClick(resource.url)}\n                  className=\"w-full flex items-center space-x-3 p-3 rounded-lg hover:bg-gray-50 transition-colors group text-left\"\n                  data-testid={`resource-${resource.id}`}\n                >\n                  <div className={`w-8 h-8 rounded-lg flex items-center justify-center ${colorClass}`}>\n                    <IconComponent size={16} />\n                  </div>\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm font-medium text-gray-900 group-hover:text-jee-primary transition-colors\">\n                      {resource.title}\n                    </p>\n                    <p className=\"text-xs text-jee-muted\">\n                      {resource.description || resource.subject}\n                    </p>\n                  </div>\n                  <ExternalLink \n                    size={14} \n                    className=\"text-gray-400 group-hover:text-jee-primary transition-colors\" \n                  />\n                </button>\n              );\n            })\n          )}\n          \n          {/* Default resources shown when no resources exist */}\n          {resources.length === 0 && (\n            <div className=\"space-y-3 opacity-60\">\n              <div className=\"flex items-center space-x-3 p-3 rounded-lg hover:bg-gray-50 transition-colors\">\n                <div className=\"w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center\">\n                  <Book className=\"text-blue-600\" size={16} />\n                </div>\n                <div className=\"flex-1\">\n                  <p className=\"text-sm font-medium text-gray-900\">NCERT Physics Solutions</p>\n                  <p className=\"text-xs text-jee-muted\">Chapter 1-15</p>\n                </div>\n              </div>\n\n              <div className=\"flex items-center space-x-3 p-3 rounded-lg hover:bg-gray-50 transition-colors\">\n                <div className=\"w-8 h-8 bg-green-100 rounded-lg flex items-center justify-center\">\n                  <Video className=\"text-green-600\" size={16} />\n                </div>\n                <div className=\"flex-1\">\n                  <p className=\"text-sm font-medium text-gray-900\">Chemistry Video Lectures</p>\n                  <p className=\"text-xs text-jee-muted\">Organic Chemistry</p>\n                </div>\n              </div>\n\n              <div className=\"flex items-center space-x-3 p-3 rounded-lg hover:bg-gray-50 transition-colors\">\n                <div className=\"w-8 h-8 bg-purple-100 rounded-lg flex items-center justify-center\">\n                  <Calculator className=\"text-purple-600\" size={16} />\n                </div>\n                <div className=\"flex-1\">\n                  <p className=\"text-sm font-medium text-gray-900\">Math Formula Sheet</p>\n                  <p className=\"text-xs text-jee-muted\">Quick Reference</p>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5292},"client/src/components/dashboard/recent-activity.tsx":{"content":"import { useState } from 'react';\nimport { Check, Clock, Plus, TrendingUp } from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { activityStorage } from '@/lib/storage';\nimport type { Activity } from '@shared/schema';\n\nconst activityIcons = {\n  task_completed: Check,\n  study_session: Clock,\n  task_created: Plus,\n  resource_added: TrendingUp,\n};\n\nconst activityColors = {\n  task_completed: 'bg-green-100 text-green-600',\n  study_session: 'bg-blue-100 text-blue-600',\n  task_created: 'bg-purple-100 text-purple-600',\n  resource_added: 'bg-yellow-100 text-yellow-600',\n};\n\nexport function RecentActivity() {\n  const [activities] = useState<Activity[]>(activityStorage.getRecent(5));\n\n  const formatTimeAgo = (timestamp: string) => {\n    const now = new Date();\n    const activityTime = new Date(timestamp);\n    const diffInMinutes = Math.floor((now.getTime() - activityTime.getTime()) / (1000 * 60));\n    \n    if (diffInMinutes < 1) return 'Just now';\n    if (diffInMinutes < 60) return `${diffInMinutes} minutes ago`;\n    \n    const diffInHours = Math.floor(diffInMinutes / 60);\n    if (diffInHours < 24) return `${diffInHours} hours ago`;\n    \n    const diffInDays = Math.floor(diffInHours / 24);\n    return `${diffInDays} days ago`;\n  };\n\n  return (\n    <Card className=\"shadow-sm border border-gray-100\">\n      <CardHeader className=\"p-6 border-b border-gray-100\">\n        <CardTitle className=\"text-xl font-semibold text-gray-900\">Recent Activity</CardTitle>\n      </CardHeader>\n      <CardContent className=\"p-6\">\n        <div className=\"space-y-4\">\n          {activities.length === 0 ? (\n            <div className=\"text-center py-8 text-jee-muted\">\n              <Clock className=\"mx-auto mb-3 opacity-50\" size={24} />\n              <p className=\"text-sm\">No recent activity</p>\n              <p className=\"text-xs\">Start studying to see your progress!</p>\n            </div>\n          ) : (\n            activities.map((activity) => {\n              const IconComponent = activityIcons[activity.type];\n              const colorClass = activityColors[activity.type];\n              \n              return (\n                <div \n                  key={activity.id} \n                  className=\"flex items-start space-x-4 animate-slide-up\"\n                  data-testid={`activity-${activity.id}`}\n                >\n                  <div className={`w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0 ${colorClass}`}>\n                    <IconComponent size={16} />\n                  </div>\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm font-medium text-gray-900\">\n                      {activity.description}\n                    </p>\n                    <p className=\"text-xs text-jee-muted\">\n                      {activity.subject && `${activity.subject} • `}\n                      {formatTimeAgo(activity.timestamp)}\n                    </p>\n                  </div>\n                </div>\n              );\n            })\n          )}\n          \n          {/* Default activities shown when no activities exist */}\n          {activities.length === 0 && (\n            <div className=\"space-y-4 opacity-60\">\n              <div className=\"flex items-start space-x-4\">\n                <div className=\"w-8 h-8 bg-green-100 rounded-full flex items-center justify-center flex-shrink-0\">\n                  <Check className=\"text-green-600\" size={16} />\n                </div>\n                <div className=\"flex-1\">\n                  <p className=\"text-sm font-medium text-gray-900\">Completed \"Kinematics Practice Problems\"</p>\n                  <p className=\"text-xs text-jee-muted\">Physics • 2 hours ago</p>\n                </div>\n              </div>\n\n              <div className=\"flex items-start space-x-4\">\n                <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center flex-shrink-0\">\n                  <Clock className=\"text-blue-600\" size={16} />\n                </div>\n                <div className=\"flex-1\">\n                  <p className=\"text-sm font-medium text-gray-900\">Started study session for Chemistry</p>\n                  <p className=\"text-xs text-jee-muted\">3 hours ago • 45 minutes</p>\n                </div>\n              </div>\n\n              <div className=\"flex items-start space-x-4\">\n                <div className=\"w-8 h-8 bg-purple-100 rounded-full flex items-center justify-center flex-shrink-0\">\n                  <Plus className=\"text-purple-600\" size={16} />\n                </div>\n                <div className=\"flex-1\">\n                  <p className=\"text-sm font-medium text-gray-900\">Added new task \"Coordinate Geometry Review\"</p>\n                  <p className=\"text-xs text-jee-muted\">Mathematics • 5 hours ago</p>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4950},"client/src/components/dashboard/study-timer.tsx":{"content":"import { Play, Pause, Square } from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { useTimer } from '@/hooks/use-timer';\nimport { studySessionStorage } from '@/lib/storage';\nimport { useState } from 'react';\nimport type { Subject } from '@shared/schema';\n\nconst TIMER_PRESETS = [\n  { label: '25m', minutes: 25 },\n  { label: '45m', minutes: 45 },\n  { label: '60m', minutes: 60 },\n];\n\nexport function StudyTimer() {\n  const [selectedSubject, setSelectedSubject] = useState<Subject>('Physics');\n  const [sessionStartTime, setSessionStartTime] = useState<string | null>(null);\n  const {\n    timeLeft,\n    formattedTime,\n    isRunning,\n    isPaused,\n    progress,\n    start,\n    pause,\n    reset,\n    setTime,\n  } = useTimer(25 * 60);\n\n  const handleStart = () => {\n    if (!isRunning && !isPaused) {\n      setSessionStartTime(new Date().toISOString());\n    }\n    start();\n  };\n\n  const handlePause = () => {\n    pause();\n  };\n\n  const handleStop = () => {\n    if (sessionStartTime) {\n      const endTime = new Date().toISOString();\n      const startTime = new Date(sessionStartTime);\n      const endTimeDate = new Date(endTime);\n      const duration = Math.round((endTimeDate.getTime() - startTime.getTime()) / 1000 / 60);\n\n      if (duration > 0) {\n        studySessionStorage.create({\n          subject: selectedSubject,\n          duration,\n          startTime: sessionStartTime,\n          endTime,\n          notes: `${duration} minute study session`,\n        });\n      }\n    }\n    \n    reset();\n    setSessionStartTime(null);\n  };\n\n  const handlePresetClick = (minutes: number) => {\n    if (!isRunning) {\n      setTime(minutes * 60);\n    }\n  };\n\n  // Calculate stroke dash offset for circular progress\n  const radius = 60;\n  const circumference = 2 * Math.PI * radius;\n  const strokeDashoffset = circumference - (progress * circumference);\n\n  return (\n    <Card className=\"shadow-sm border border-gray-100 p-6\">\n      <CardContent className=\"p-0\">\n        <div className=\"text-center\">\n          <CardTitle className=\"text-lg font-semibold text-gray-900 mb-4\">\n            Study Timer\n          </CardTitle>\n          \n          {/* Subject Selector */}\n          <div className=\"mb-4\">\n            <select\n              value={selectedSubject}\n              onChange={(e) => setSelectedSubject(e.target.value as Subject)}\n              className=\"px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-jee-primary\"\n              disabled={isRunning}\n              data-testid=\"select-timer-subject\"\n            >\n              <option value=\"Physics\">Physics</option>\n              <option value=\"Chemistry\">Chemistry</option>\n              <option value=\"Mathematics\">Mathematics</option>\n            </select>\n          </div>\n          \n          {/* Timer Display */}\n          <div className=\"relative w-40 h-40 mx-auto mb-6\">\n            <svg className=\"w-40 h-40 transform -rotate-90\" viewBox=\"0 0 144 144\">\n              <circle\n                cx=\"72\"\n                cy=\"72\"\n                r=\"60\"\n                stroke=\"#E5E7EB\"\n                strokeWidth=\"8\"\n                fill=\"none\"\n              />\n              <circle\n                cx=\"72\"\n                cy=\"72\"\n                r=\"60\"\n                stroke=\"var(--jee-primary)\"\n                strokeWidth=\"8\"\n                fill=\"none\"\n                strokeDasharray={circumference}\n                strokeDashoffset={strokeDashoffset}\n                strokeLinecap=\"round\"\n                className=\"transition-all duration-300\"\n                data-testid=\"timer-progress-circle\"\n              />\n            </svg>\n            <div className=\"absolute inset-0 flex items-center justify-center\">\n              <div className=\"text-center\">\n                <div \n                  className=\"text-2xl font-bold text-gray-900\"\n                  data-testid=\"timer-display\"\n                >\n                  {formattedTime}\n                </div>\n                <div className=\"text-sm text-jee-muted\">Study Session</div>\n              </div>\n            </div>\n          </div>\n\n          {/* Timer Controls */}\n          <div className=\"flex justify-center space-x-3 mb-4\">\n            <Button\n              onClick={handleStart}\n              disabled={isRunning}\n              size=\"lg\"\n              className=\"w-12 h-12 rounded-full jee-primary hover:bg-blue-700 transition-colors\"\n              data-testid=\"button-timer-start\"\n            >\n              <Play size={16} />\n            </Button>\n            <Button\n              onClick={handlePause}\n              disabled={!isRunning}\n              variant=\"outline\"\n              size=\"lg\"\n              className=\"w-12 h-12 rounded-full\"\n              data-testid=\"button-timer-pause\"\n            >\n              <Pause size={16} />\n            </Button>\n            <Button\n              onClick={handleStop}\n              variant=\"outline\"\n              size=\"lg\"\n              className=\"w-12 h-12 rounded-full\"\n              data-testid=\"button-timer-stop\"\n            >\n              <Square size={16} />\n            </Button>\n          </div>\n\n          {/* Timer Presets */}\n          <div className=\"grid grid-cols-3 gap-2\">\n            {TIMER_PRESETS.map((preset) => (\n              <Button\n                key={preset.label}\n                onClick={() => handlePresetClick(preset.minutes)}\n                disabled={isRunning}\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"py-2 px-3 text-xs hover:bg-gray-200 transition-colors\"\n                data-testid={`button-preset-${preset.label}`}\n              >\n                {preset.label}\n              </Button>\n            ))}\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5892},"client/src/components/dashboard/subject-progress.tsx":{"content":"import { useState } from 'react';\nimport { Atom, FlaskConical, Calculator, Filter, MoreHorizontal } from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Badge } from '@/components/ui/badge';\nimport { taskStorage } from '@/lib/storage';\nimport type { Task, Subject } from '@shared/schema';\n\nconst subjectConfig = {\n  Physics: {\n    icon: Atom,\n    color: 'blue',\n    bgColor: 'physics-theme',\n  },\n  Chemistry: {\n    icon: FlaskConical,\n    color: 'green',\n    bgColor: 'chemistry-theme',\n  },\n  Mathematics: {\n    icon: Calculator,\n    color: 'purple',\n    bgColor: 'mathematics-theme',\n  },\n};\n\nconst statusConfig = {\n  completed: { label: 'Completed', variant: 'default' as const, className: 'bg-green-100 text-green-800' },\n  'in-progress': { label: 'In Progress', variant: 'secondary' as const, className: 'bg-yellow-100 text-yellow-800' },\n  pending: { label: 'Due Today', variant: 'outline' as const, className: 'bg-yellow-100 text-yellow-800' },\n  overdue: { label: 'Overdue', variant: 'destructive' as const, className: 'bg-red-100 text-red-800' },\n};\n\ninterface SubjectProgressProps {\n  onTaskUpdate: (taskId: string, updates: Partial<Task>) => void;\n}\n\nexport function SubjectProgress({ onTaskUpdate }: SubjectProgressProps) {\n  const [tasks, setTasks] = useState<Task[]>(taskStorage.getAll());\n\n  const getSubjectData = (subject: Subject) => {\n    const subjectTasks = tasks.filter(task => task.subject === subject);\n    const completedTasks = subjectTasks.filter(task => task.status === 'completed');\n    const pendingTasks = subjectTasks.filter(task => task.status !== 'completed');\n    const progress = subjectTasks.length > 0 ? Math.round((completedTasks.length / subjectTasks.length) * 100) : 0;\n    \n    return {\n      tasks: subjectTasks.slice(0, 3), // Show only first 3 tasks\n      total: subjectTasks.length,\n      pending: pendingTasks.length,\n      progress,\n    };\n  };\n\n  const handleTaskToggle = (taskId: string, completed: boolean) => {\n    const updates = { status: completed ? 'completed' as const : 'pending' as const };\n    const updatedTask = taskStorage.update(taskId, updates);\n    \n    if (updatedTask) {\n      setTasks(taskStorage.getAll());\n      onTaskUpdate(taskId, updates);\n    }\n  };\n\n  const getTaskStatus = (task: Task): keyof typeof statusConfig => {\n    if (task.status === 'completed') return 'completed';\n    if (task.status === 'in-progress') return 'in-progress';\n    \n    const now = new Date();\n    const dueDate = new Date(task.dueDate);\n    const today = new Date();\n    today.setHours(23, 59, 59, 999);\n    \n    if (dueDate < now) return 'overdue';\n    if (dueDate.toDateString() === today.toDateString()) return 'pending';\n    \n    return 'pending';\n  };\n\n  return (\n    <Card className=\"shadow-sm border border-gray-100 overflow-hidden\">\n      <CardHeader className=\"p-6 border-b border-gray-100\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-xl font-semibold text-gray-900\">Subject Progress</CardTitle>\n          <div className=\"flex space-x-2\">\n            <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-filter\">\n              <Filter size={16} />\n            </Button>\n            <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-more-options\">\n              <MoreHorizontal size={16} />\n            </Button>\n          </div>\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"p-6 space-y-6\">\n        {(Object.keys(subjectConfig) as Subject[]).map((subject) => {\n          const data = getSubjectData(subject);\n          const config = subjectConfig[subject];\n          const IconComponent = config.icon;\n          \n          return (\n            <div\n              key={subject}\n              className={`border rounded-xl p-5 hover:shadow-md transition-all duration-300 ${config.bgColor}`}\n              data-testid={`subject-section-${subject.toLowerCase()}`}\n            >\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className={`w-10 h-10 bg-${config.color}-600 rounded-lg flex items-center justify-center`}>\n                    <IconComponent className=\"text-white\" size={20} />\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold text-gray-900\">{subject}</h4>\n                    <p className=\"text-sm text-jee-muted\">\n                      {data.total} tasks • {data.pending} pending\n                    </p>\n                  </div>\n                </div>\n                <div className=\"text-right\">\n                  <div className={`text-2xl font-bold text-${config.color}-600`} data-testid={`progress-${subject.toLowerCase()}`}>\n                    {data.progress}%\n                  </div>\n                  <div className=\"text-sm text-jee-muted\">Progress</div>\n                </div>\n              </div>\n              \n              <div className=\"space-y-3\">\n                {data.tasks.length === 0 ? (\n                  <div className=\"text-center py-4 text-jee-muted\">\n                    <p>No tasks yet. Create your first {subject} task!</p>\n                  </div>\n                ) : (\n                  data.tasks.map((task) => {\n                    const status = getTaskStatus(task);\n                    const statusInfo = statusConfig[status];\n                    \n                    return (\n                      <div\n                        key={task.id}\n                        className=\"flex items-center justify-between p-3 bg-white rounded-lg shadow-sm hover:shadow-md transition-shadow\"\n                        data-testid={`task-item-${task.id}`}\n                      >\n                        <div className=\"flex items-center space-x-3\">\n                          <Checkbox\n                            checked={task.status === 'completed'}\n                            onCheckedChange={(checked) => handleTaskToggle(task.id, !!checked)}\n                            className=\"w-4 h-4\"\n                            data-testid={`checkbox-task-${task.id}`}\n                          />\n                          <span\n                            className={`text-sm font-medium ${\n                              task.status === 'completed' ? 'line-through text-jee-muted' : ''\n                            }`}\n                          >\n                            {task.title}\n                          </span>\n                        </div>\n                        <Badge\n                          className={`text-xs ${statusInfo.className}`}\n                          data-testid={`badge-status-${task.id}`}\n                        >\n                          {statusInfo.label}\n                        </Badge>\n                      </div>\n                    );\n                  })\n                )}\n              </div>\n            </div>\n          );\n        })}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":7112},"client/src/components/dashboard/todays-schedule.tsx":{"content":"import { useState } from 'react';\nimport { Plus, Calendar } from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { scheduleStorage } from '@/lib/storage';\nimport type { ScheduleItem } from '@shared/schema';\n\nconst subjectColors = {\n  Physics: 'bg-blue-600',\n  Chemistry: 'bg-green-600',\n  Mathematics: 'bg-purple-600',\n};\n\nexport function TodaysSchedule() {\n  const [schedule, setSchedule] = useState<ScheduleItem[]>(scheduleStorage.getTodaysSchedule());\n\n  const formatTime = (timeString: string) => {\n    const time = new Date(`2000-01-01T${timeString}`);\n    return time.toLocaleTimeString('en-US', {\n      hour: 'numeric',\n      minute: '2-digit',\n      hour12: true,\n    });\n  };\n\n  const handleToggleComplete = (id: string, completed: boolean) => {\n    const updated = scheduleStorage.update(id, { completed });\n    if (updated) {\n      setSchedule(scheduleStorage.getTodaysSchedule());\n    }\n  };\n\n  return (\n    <Card className=\"shadow-sm border border-gray-100 p-6\">\n      <CardContent className=\"p-0\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <CardTitle className=\"text-lg font-semibold text-gray-900 flex items-center\">\n            <Calendar className=\"mr-2\" size={18} />\n            Today's Schedule\n          </CardTitle>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"text-jee-primary hover:text-blue-700 transition-colors\"\n            data-testid=\"button-add-schedule\"\n          >\n            <Plus size={16} />\n          </Button>\n        </div>\n        \n        <div className=\"space-y-3\">\n          {schedule.length === 0 ? (\n            <div className=\"text-center py-8 text-jee-muted\">\n              <Calendar className=\"mx-auto mb-3 opacity-50\" size={24} />\n              <p className=\"text-sm\">No schedule for today</p>\n              <p className=\"text-xs\">Add your first schedule item!</p>\n            </div>\n          ) : (\n            schedule.map((item) => {\n              const colorClass = subjectColors[item.subject];\n              \n              return (\n                <div\n                  key={item.id}\n                  className={`flex items-center space-x-3 p-3 rounded-lg transition-all duration-200 ${\n                    item.completed \n                      ? 'bg-gray-100 opacity-60' \n                      : item.subject === 'Physics' \n                        ? 'bg-blue-50' \n                        : item.subject === 'Chemistry' \n                          ? 'bg-green-50' \n                          : 'bg-purple-50'\n                  }`}\n                  data-testid={`schedule-item-${item.id}`}\n                >\n                  <div className={`w-2 h-8 ${colorClass} rounded-full`} />\n                  <div className=\"flex-1\">\n                    <p className={`text-sm font-medium ${item.completed ? 'line-through text-gray-500' : 'text-gray-900'}`}>\n                      {item.title}\n                    </p>\n                    <p className=\"text-xs text-jee-muted\">\n                      {formatTime(item.startTime)} - {formatTime(item.endTime)}\n                    </p>\n                  </div>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => handleToggleComplete(item.id, !item.completed)}\n                    className=\"text-xs\"\n                    data-testid={`button-toggle-${item.id}`}\n                  >\n                    {item.completed ? 'Undo' : 'Done'}\n                  </Button>\n                </div>\n              );\n            })\n          )}\n        </div>\n        \n        {/* Default schedule items if none exist */}\n        {schedule.length === 0 && (\n          <div className=\"space-y-3 mt-4 opacity-60\">\n            <div className=\"flex items-center space-x-3 p-3 bg-blue-50 rounded-lg\">\n              <div className=\"w-2 h-8 bg-blue-600 rounded-full\" />\n              <div className=\"flex-1\">\n                <p className=\"text-sm font-medium text-gray-900\">Physics Mock Test</p>\n                <p className=\"text-xs text-jee-muted\">10:00 AM - 12:00 PM</p>\n              </div>\n            </div>\n\n            <div className=\"flex items-center space-x-3 p-3 bg-green-50 rounded-lg\">\n              <div className=\"w-2 h-8 bg-green-600 rounded-full\" />\n              <div className=\"flex-1\">\n                <p className=\"text-sm font-medium text-gray-900\">Chemistry Revision</p>\n                <p className=\"text-xs text-jee-muted\">2:00 PM - 4:00 PM</p>\n              </div>\n            </div>\n\n            <div className=\"flex items-center space-x-3 p-3 bg-purple-50 rounded-lg\">\n              <div className=\"w-2 h-8 bg-purple-600 rounded-full\" />\n              <div className=\"flex-1\">\n                <p className=\"text-sm font-medium text-gray-900\">Math Practice</p>\n                <p className=\"text-xs text-jee-muted\">6:00 PM - 8:00 PM</p>\n              </div>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5104},"client/src/components/modals/resource-modal.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogDescription,\n  DialogFooter,\n} from '@/components/ui/dialog';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { insertResourceSchema } from '@shared/schema';\nimport { resourceStorage } from '@/lib/storage';\nimport { useToast } from '@/hooks/use-toast';\nimport { BookOpen } from 'lucide-react';\nimport type { InsertResource } from '@shared/schema';\n\ninterface ResourceModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  onResourceCreated?: () => void;\n}\n\nexport function ResourceModal({ open, onOpenChange, onResourceCreated }: ResourceModalProps) {\n  const { toast } = useToast();\n  \n  const form = useForm<InsertResource>({\n    resolver: zodResolver(insertResourceSchema),\n    defaultValues: {\n      title: '',\n      url: '',\n      description: '',\n      subject: 'Physics',\n      category: 'website',\n    },\n  });\n\n  const onSubmit = (data: InsertResource) => {\n    try {\n      const resource = resourceStorage.create(data);\n      \n      toast({\n        title: 'Resource Added',\n        description: `Resource \"${resource.title}\" has been added successfully.`,\n      });\n      \n      form.reset();\n      onOpenChange(false);\n      onResourceCreated?.();\n    } catch (error) {\n      toast({\n        title: 'Error',\n        description: 'Failed to add resource. Please try again.',\n        variant: 'destructive',\n      });\n    }\n  };\n\n  // Reset form when modal closes\n  useEffect(() => {\n    if (!open) {\n      form.reset();\n    }\n  }, [open, form]);\n\n  if (!open) return null;\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange} modal>\n      <DialogContent \n        className=\"sm:max-w-lg modal-content\"\n        style={{ zIndex: 51 }}\n      >\n        <div className=\"modal-header\">\n          <div className=\"mx-auto w-16 h-16 modal-icon-container rounded-2xl flex items-center justify-center mb-4\">\n            <BookOpen className=\"text-primary\" size={28} />\n          </div>\n          <DialogTitle className=\"text-xl font-bold text-center text-foreground mb-2\">\n            Add New Resource\n          </DialogTitle>\n          <DialogDescription className=\"text-center text-muted-foreground leading-relaxed\">\n            Add a new study resource with URL, subject, and category information.\n          </DialogDescription>\n        </div>\n        \n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"title\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Resource Title</FormLabel>\n                  <FormControl>\n                    <Input\n                      placeholder=\"Enter resource title...\"\n                      className=\"modal-input\"\n                      {...field}\n                      data-testid=\"input-resource-title\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <FormField\n              control={form.control}\n              name=\"url\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>URL</FormLabel>\n                  <FormControl>\n                    <Input\n                      type=\"url\"\n                      placeholder=\"https://example.com\"\n                      className=\"modal-input\"\n                      {...field}\n                      data-testid=\"input-resource-url\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <FormField\n              control={form.control}\n              name=\"subject\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Subject</FormLabel>\n                  <Select \n                    onValueChange={field.onChange} \n                    defaultValue={field.value}\n                  >\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-resource-subject\">\n                        <SelectValue placeholder=\"Select Subject\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"Physics\">Physics</SelectItem>\n                      <SelectItem value=\"Chemistry\">Chemistry</SelectItem>\n                      <SelectItem value=\"Mathematics\">Mathematics</SelectItem>\n                      <SelectItem value=\"General\">General</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <FormField\n              control={form.control}\n              name=\"category\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Category</FormLabel>\n                  <Select \n                    onValueChange={field.onChange} \n                    defaultValue={field.value}\n                  >\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-resource-category\">\n                        <SelectValue placeholder=\"Select Category\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"video\">Video</SelectItem>\n                      <SelectItem value=\"book\">Book</SelectItem>\n                      <SelectItem value=\"pdf\">PDF</SelectItem>\n                      <SelectItem value=\"website\">Website</SelectItem>\n                      <SelectItem value=\"tool\">Tool</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Description (Optional)</FormLabel>\n                  <FormControl>\n                    <Textarea\n                      placeholder=\"Add resource description...\"\n                      className=\"resize-none modal-input\"\n                      rows={3}\n                      {...field}\n                      data-testid=\"textarea-resource-description\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <DialogFooter className=\"flex flex-col sm:flex-row gap-3 pt-6\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => onOpenChange(false)}\n                className=\"w-full sm:w-auto modal-button bg-white/50 hover:bg-white/70 dark:bg-gray-800/50 dark:hover:bg-gray-800/70 border-2\"\n                data-testid=\"button-cancel-resource\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                className=\"w-full sm:w-auto modal-button bg-primary text-primary-foreground hover:bg-primary/90 font-semibold\"\n                data-testid=\"button-add-resource\"\n              >\n                Add Resource\n              </Button>\n            </DialogFooter>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":8040},"client/src/components/modals/task-modal.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { X } from 'lucide-react';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogDescription,\n  DialogFooter,\n} from '@/components/ui/dialog';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Badge } from '@/components/ui/badge';\nimport { insertTaskSchema } from '@shared/schema';\nimport { taskStorage } from '@/lib/storage';\nimport { useToast } from '@/hooks/use-toast';\nimport { CheckSquare } from 'lucide-react';\nimport type { InsertTask } from '@shared/schema';\n\ninterface TaskModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  onTaskCreated?: () => void;\n}\n\nconst priorityOptions = [\n  { value: 'low', label: 'Low', className: 'bg-green-100 text-green-800' },\n  { value: 'medium', label: 'Medium', className: 'bg-yellow-100 text-yellow-800' },\n  { value: 'high', label: 'High', className: 'bg-red-100 text-red-800' },\n] as const;\n\nexport function TaskModal({ open, onOpenChange, onTaskCreated }: TaskModalProps) {\n  const [selectedPriority, setSelectedPriority] = useState<'low' | 'medium' | 'high'>('medium');\n  const { toast } = useToast();\n  \n  const form = useForm<InsertTask>({\n    resolver: zodResolver(insertTaskSchema),\n    defaultValues: {\n      title: '',\n      subject: 'Physics',\n      description: '',\n      priority: 'medium',\n      dueDate: new Date().toISOString().split('T')[0],\n    },\n  });\n\n  // Set minimum date to today\n  const today = new Date().toISOString().split('T')[0];\n\n  const onSubmit = (data: InsertTask) => {\n    try {\n      const task = taskStorage.create(data);\n      \n      toast({\n        title: 'Task Created',\n        description: `Task \"${task.title}\" has been created successfully.`,\n      });\n      \n      form.reset();\n      onOpenChange(false);\n      onTaskCreated?.();\n    } catch (error) {\n      toast({\n        title: 'Error',\n        description: 'Failed to create task. Please try again.',\n        variant: 'destructive',\n      });\n    }\n  };\n\n  // Reset form when modal closes\n  useEffect(() => {\n    if (!open) {\n      form.reset();\n      setSelectedPriority('medium');\n    }\n  }, [open, form]);\n\n  if (!open) return null;\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange} modal>\n      <DialogContent \n        className=\"sm:max-w-lg modal-content\"\n        style={{ zIndex: 51 }}\n      >\n        <div className=\"modal-header\">\n          <div className=\"mx-auto w-16 h-16 modal-icon-container rounded-2xl flex items-center justify-center mb-4\">\n            <CheckSquare className=\"text-primary\" size={28} />\n          </div>\n          <DialogTitle className=\"text-xl font-bold text-center text-foreground mb-2\">\n            Create New Task\n          </DialogTitle>\n          <DialogDescription className=\"text-center text-muted-foreground leading-relaxed\">\n            Add a new task to your study schedule with subject, priority, and due date.\n          </DialogDescription>\n        </div>\n        \n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"title\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Task Title</FormLabel>\n                  <FormControl>\n                    <Input\n                      placeholder=\"Enter task title...\"\n                      className=\"modal-input\"\n                      {...field}\n                      data-testid=\"input-task-title\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <FormField\n              control={form.control}\n              name=\"subject\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Subject</FormLabel>\n                  <Select \n                    onValueChange={field.onChange} \n                    defaultValue={field.value}\n                  >\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-task-subject\">\n                        <SelectValue placeholder=\"Select Subject\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"Physics\">Physics</SelectItem>\n                      <SelectItem value=\"Chemistry\">Chemistry</SelectItem>\n                      <SelectItem value=\"Mathematics\">Mathematics</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Description (Optional)</FormLabel>\n                  <FormControl>\n                    <Textarea\n                      placeholder=\"Add task description...\"\n                      className=\"resize-none modal-input\"\n                      rows={3}\n                      {...field}\n                      data-testid=\"textarea-task-description\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <FormField\n              control={form.control}\n              name=\"dueDate\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Due Date</FormLabel>\n                  <FormControl>\n                    <Input\n                      type=\"date\"\n                      min={today}\n                      className=\"modal-input\"\n                      {...field}\n                      data-testid=\"input-task-due-date\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <FormField\n              control={form.control}\n              name=\"priority\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Priority</FormLabel>\n                  <FormControl>\n                    <div className=\"flex space-x-2\">\n                      {priorityOptions.map((option) => (\n                        <Badge\n                          key={option.value}\n                          variant={field.value === option.value ? 'default' : 'outline'}\n                          className={`cursor-pointer transition-all hover:opacity-80 ${\n                            field.value === option.value ? option.className : ''\n                          }`}\n                          onClick={() => {\n                            field.onChange(option.value);\n                            setSelectedPriority(option.value);\n                          }}\n                          data-testid={`badge-priority-${option.value}`}\n                        >\n                          {option.label}\n                        </Badge>\n                      ))}\n                    </div>\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <DialogFooter className=\"flex flex-col sm:flex-row gap-3 pt-6\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => onOpenChange(false)}\n                className=\"w-full sm:w-auto modal-button bg-white/50 hover:bg-white/70 dark:bg-gray-800/50 dark:hover:bg-gray-800/70 border-2\"\n                data-testid=\"button-cancel-task\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                className=\"w-full sm:w-auto modal-button bg-primary text-primary-foreground hover:bg-primary/90 font-semibold\"\n                data-testid=\"button-create-task\"\n              >\n                Create Task\n              </Button>\n            </DialogFooter>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":8614},"client/src/components/modals/welcome-modal.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { GraduationCap, User } from 'lucide-react';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { useLocalStorage } from '@/hooks/use-local-storage';\n\nconst userSchema = z.object({\n  name: z.string().min(2, 'Name must be at least 2 characters').max(50, 'Name must be less than 50 characters'),\n});\n\ntype UserFormData = z.infer<typeof userSchema>;\n\ninterface WelcomeModalProps {\n  open: boolean;\n  onComplete: (name: string) => void;\n}\n\nexport function WelcomeModal({ open, onComplete }: WelcomeModalProps) {\n  const form = useForm<UserFormData>({\n    resolver: zodResolver(userSchema),\n    defaultValues: {\n      name: '',\n    },\n  });\n\n  const onSubmit = (data: UserFormData) => {\n    onComplete(data.name);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={() => {}} modal>\n      <DialogContent className=\"sm:max-w-md modal-content [&>button]:hidden\">\n        <div className=\"modal-header\">\n          <div className=\"mx-auto w-20 h-20 modal-icon-container rounded-full flex items-center justify-center mb-6 bg-gradient-to-br from-primary via-accent to-secondary\">\n            <GraduationCap className=\"text-white\" size={36} />\n          </div>\n          <DialogTitle className=\"text-2xl font-bold text-center text-foreground mb-3\">\n            Welcome to JEE Study Manager!\n          </DialogTitle>\n          <p className=\"text-center text-muted-foreground leading-relaxed\">\n            Let's personalize your study experience. What should we call you?\n          </p>\n        </div>\n        \n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6 mt-6\">\n            <FormField\n              control={form.control}\n              name=\"name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"text-base font-medium\">Your Name</FormLabel>\n                  <FormControl>\n                    <div className=\"relative\">\n                      <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={18} />\n                      <Input\n                        placeholder=\"Enter your name...\"\n                        className=\"pl-10 py-3 text-base modal-input\"\n                        {...field}\n                        data-testid=\"input-user-name\"\n                      />\n                    </div>\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <Button\n              type=\"submit\"\n              className=\"w-full modal-button bg-gradient-to-r from-primary via-accent to-secondary text-white py-3 text-base font-semibold hover:from-primary/90 hover:via-accent/90 hover:to-secondary/90 transition-all duration-300 shadow-lg\"\n              data-testid=\"button-save-name\"\n            >\n              Get Started\n            </Button>\n          </form>\n        </Form>\n        \n        <div className=\"text-center text-xs text-muted-foreground mt-4\">\n          Your information is stored locally on your device and never shared.\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":3569},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, style, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 modal-backdrop data-[state=open]:animate-overlay-enter data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    style={{ zIndex: 50, ...style }}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\ninterface DialogContentProps extends React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content> {\n  size?: 'sm' | 'md' | 'lg' | 'xl';\n  scrollable?: boolean;\n}\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  DialogContentProps\n>(({ className, children, style, size = 'md', scrollable = false, ...props }, ref) => {\n  const sizeClasses = {\n    sm: 'max-w-sm',\n    md: 'max-w-lg',\n    lg: 'max-w-2xl',\n    xl: 'max-w-4xl'\n  };\n\n  const modalSizeClass = `modal-${size}`;\n\n  return (\n    <DialogPortal>\n      <DialogOverlay style={{ zIndex: 50 }} />\n      <DialogPrimitive.Content\n        ref={ref}\n        className={cn(\n          \"fixed left-[50%] top-[50%] z-51 grid w-full translate-x-[-50%] translate-y-[-50%] modal-content p-6 data-[state=open]:animate-modal-enter data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[state=closed]:slide-out-to-top-[48%]\",\n          sizeClasses[size],\n          modalSizeClass,\n          scrollable && \"modal-content-scrollable\",\n          className\n        )}\n        style={{ zIndex: 51, ...style }}\n        {...props}\n      >\n        {scrollable ? (\n          <div className=\"modal-body-scrollable\">\n            {children}\n          </div>\n        ) : (\n          children\n        )}\n        <DialogPrimitive.Close className=\"absolute right-4 top-4 z-10 rounded-full p-2 bg-white/10 hover:bg-white/20 dark:bg-black/10 dark:hover:bg-black/20 opacity-70 ring-offset-background transition-all duration-200 hover:opacity-100 hover:scale-110 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2 disabled:pointer-events-none\">\n          <X className=\"h-4 w-4\" />\n          <span className=\"sr-only\">Close</span>\n        </DialogPrimitive.Close>\n      </DialogPrimitive.Content>\n    </DialogPortal>\n  )\n})\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":4389},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}","size_bytes":7294},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }","size_bytes":1882},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/modals/confirmation-dialog.tsx":{"content":"import { AlertTriangle, Trash2 } from 'lucide-react';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogDescription,\n  DialogFooter,\n} from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\n\ninterface ConfirmationDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  onConfirm: () => void;\n  title: string;\n  description: string;\n  confirmText?: string;\n  cancelText?: string;\n  variant?: 'default' | 'destructive';\n  icon?: 'warning' | 'delete';\n}\n\nexport function ConfirmationDialog({\n  open,\n  onOpenChange,\n  onConfirm,\n  title,\n  description,\n  confirmText = 'Confirm',\n  cancelText = 'Cancel',\n  variant = 'default',\n  icon = 'warning',\n}: ConfirmationDialogProps) {\n  const handleConfirm = () => {\n    onConfirm();\n    onOpenChange(false);\n  };\n\n  const IconComponent = icon === 'delete' ? Trash2 : AlertTriangle;\n  const iconColor = variant === 'destructive' ? 'text-red-500' : 'text-amber-500';\n  const iconBgColor = variant === 'destructive' ? 'bg-red-50 dark:bg-red-900/20' : 'bg-amber-50 dark:bg-amber-900/20';\n\n  if (!open) return null;\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange} modal>\n      <DialogContent \n        className={`sm:max-w-md modal-content ${variant === 'destructive' ? 'modal-destructive' : 'modal-warning'}`}\n        style={{ zIndex: 51 }}\n      >\n        <div className=\"modal-header\">\n          <div className={`mx-auto w-16 h-16 modal-icon-container rounded-2xl flex items-center justify-center mb-4`}>\n            <IconComponent className={`${iconColor}`} size={28} />\n          </div>\n          <DialogTitle className=\"text-xl font-bold text-center text-foreground mb-2\">\n            {title}\n          </DialogTitle>\n          <DialogDescription className=\"text-center text-muted-foreground leading-relaxed\">\n            {description}\n          </DialogDescription>\n        </div>\n        \n        <DialogFooter className=\"flex flex-col sm:flex-row gap-3 pt-2\">\n          <Button\n            type=\"button\"\n            variant=\"outline\"\n            onClick={() => onOpenChange(false)}\n            className=\"w-full sm:w-auto modal-button bg-white/50 hover:bg-white/70 dark:bg-gray-800/50 dark:hover:bg-gray-800/70 border-2\"\n            data-testid=\"button-cancel-confirmation\"\n          >\n            {cancelText}\n          </Button>\n          <Button\n            type=\"button\"\n            variant={variant}\n            onClick={handleConfirm}\n            className=\"w-full sm:w-auto modal-button font-semibold\"\n            data-testid=\"button-confirm-action\"\n          >\n            {confirmText}\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":2710},"client/src/components/simple-modal.tsx":{"content":"import { X } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\n\ninterface SimpleModalProps {\n  open: boolean;\n  onClose: () => void;\n  title: string;\n  children: React.ReactNode;\n  className?: string;\n  size?: 'sm' | 'md' | 'lg' | 'xl';\n  scrollable?: boolean;\n}\n\nexport function SimpleModal({ \n  open, \n  onClose, \n  title, \n  children, \n  className = '', \n  size = 'md',\n  scrollable = true \n}: SimpleModalProps) {\n  if (!open) return null;\n\n  const sizeClasses = {\n    sm: 'max-w-sm',\n    md: 'max-w-sm sm:max-w-md',\n    lg: 'max-w-sm sm:max-w-md lg:max-w-lg',\n    xl: 'max-w-sm sm:max-w-md lg:max-w-lg xl:max-w-xl'\n  };\n\n  const modalSizeClass = `modal-${size}`;\n\n  return (\n    <div \n      className=\"fixed inset-0 z-[99999] flex items-center justify-center p-4 modal-backdrop overflow-auto\"\n      style={{ \n        backgroundColor: 'rgba(0, 0, 0, 0.5)',\n        zIndex: 99999\n      }}\n      onClick={(e) => {\n        if (e.target === e.currentTarget) onClose();\n      }}\n    >\n      <div \n        className={`modal-content ${scrollable ? 'modal-content-scrollable' : ''} ${modalSizeClass} bg-white dark:bg-gray-800 rounded-lg shadow-xl w-full ${sizeClasses[size]} max-h-[90vh] overflow-hidden ${className}`}\n        style={{ \n          zIndex: 100000,\n          margin: 'auto'\n        }}\n        onClick={(e) => e.stopPropagation()}\n      >\n        {/* Header - Fixed */}\n        <div className=\"flex items-center justify-between p-4 sm:p-6 border-b border-gray-200 dark:border-gray-700 flex-shrink-0\">\n          <h2 className=\"text-lg sm:text-xl font-bold text-gray-900 dark:text-white pr-4\">\n            {title}\n          </h2>\n          <Button\n            onClick={onClose}\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"h-8 w-8 p-0 hover:bg-gray-100 dark:hover:bg-gray-700 flex-shrink-0\"\n            data-testid=\"button-close-modal\"\n          >\n            <X className=\"h-4 w-4\" />\n          </Button>\n        </div>\n        \n        {/* Content - Scrollable */}\n        <div className={`${scrollable ? 'overflow-y-auto' : ''} p-4 sm:p-6 max-h-[calc(90vh-120px)]`}>\n          {children}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":2190},"client/src/components/new-modals/simple-confirmation-dialog.tsx":{"content":"import { SimpleModal } from '@/components/simple-modal';\nimport { Button } from '@/components/ui/button';\nimport { AlertTriangle, Trash2 } from 'lucide-react';\n\ninterface SimpleConfirmationDialogProps {\n  open: boolean;\n  onClose: () => void;\n  onConfirm: () => void;\n  title: string;\n  description: string;\n  confirmText?: string;\n  cancelText?: string;\n  variant?: 'destructive' | 'warning';\n  icon?: 'delete' | 'warning';\n}\n\nexport function SimpleConfirmationDialog({\n  open,\n  onClose,\n  onConfirm,\n  title,\n  description,\n  confirmText = 'Confirm',\n  cancelText = 'Cancel',\n  variant = 'warning',\n  icon = 'warning'\n}: SimpleConfirmationDialogProps) {\n  const handleConfirm = () => {\n    onConfirm();\n    onClose();\n  };\n\n  const IconComponent = icon === 'delete' ? Trash2 : AlertTriangle;\n  const iconColor = variant === 'destructive' ? 'text-red-500' : 'text-yellow-500';\n  const buttonColor = variant === 'destructive' \n    ? 'bg-red-500 hover:bg-red-600' \n    : 'bg-yellow-500 hover:bg-yellow-600';\n\n  return (\n    <SimpleModal\n      open={open}\n      onClose={onClose}\n      title={title}\n      className=\"max-w-xs sm:max-w-sm md:max-w-md\"\n    >\n      <div className=\"text-center\">\n        <div className=\"mx-auto flex items-center justify-center w-10 h-10 sm:w-12 sm:h-12 rounded-full bg-gray-100 dark:bg-gray-700 mb-4\">\n          <IconComponent className={`w-5 h-5 sm:w-6 sm:h-6 ${iconColor}`} />\n        </div>\n        \n        <p className=\"text-sm sm:text-base text-gray-600 dark:text-gray-300 mb-6\">\n          {description}\n        </p>\n        \n        <div className=\"flex flex-col sm:flex-row sm:justify-end gap-2 sm:gap-3\">\n          <Button\n            type=\"button\"\n            variant=\"outline\"\n            onClick={onClose}\n            className=\"w-full sm:w-auto text-sm sm:text-base\"\n          >\n            {cancelText}\n          </Button>\n          <Button\n            type=\"button\"\n            onClick={handleConfirm}\n            className={`w-full sm:w-auto text-white text-sm sm:text-base ${buttonColor}`}\n          >\n            {confirmText}\n          </Button>\n        </div>\n      </div>\n    </SimpleModal>\n  );\n}","size_bytes":2148},"client/src/components/new-modals/simple-resource-modal.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { SimpleModal } from '@/components/simple-modal';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { insertResourceSchema } from '@shared/schema';\nimport { resourceStorage } from '@/lib/storage';\nimport { useToast } from '@/hooks/use-toast';\nimport type { InsertResource } from '@shared/schema';\n\ninterface SimpleResourceModalProps {\n  open: boolean;\n  onClose: () => void;\n  onResourceCreated?: () => void;\n}\n\nexport function SimpleResourceModal({ open, onClose, onResourceCreated }: SimpleResourceModalProps) {\n  const { toast } = useToast();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  \n  const {\n    register,\n    handleSubmit,\n    reset,\n    setValue,\n    formState: { errors }\n  } = useForm<InsertResource>({\n    resolver: zodResolver(insertResourceSchema),\n    defaultValues: {\n      title: '',\n      url: '',\n      description: '',\n      subject: 'Physics',\n      category: 'website',\n    },\n  });\n\n  const onSubmit = async (data: InsertResource) => {\n    console.log('Resource form submitted with data:', data);\n    setIsSubmitting(true);\n    try {\n      const resource = resourceStorage.create(data);\n      console.log('Resource created:', resource);\n      \n      toast({\n        title: 'Resource Added',\n        description: `Resource \"${resource.title}\" has been added successfully.`,\n      });\n      \n      reset();\n      onClose();\n      onResourceCreated?.();\n    } catch (error) {\n      console.error('Error creating resource:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to add resource. Please try again.',\n        variant: 'destructive',\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  useEffect(() => {\n    if (!open) {\n      reset();\n    }\n  }, [open, reset]);\n\n  return (\n    <SimpleModal\n      open={open}\n      onClose={onClose}\n      title=\"Add New Resource\"\n      className=\"max-w-sm sm:max-w-md lg:max-w-lg\"\n    >\n      <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-3 sm:space-y-4\">\n        <div>\n          <Label htmlFor=\"title\" className=\"text-sm sm:text-base\">Resource Title</Label>\n          <Input\n            id=\"title\"\n            placeholder=\"Enter resource title...\"\n            {...register('title')}\n            className=\"mt-1 text-sm sm:text-base\"\n          />\n          {errors.title && (\n            <p className=\"text-xs sm:text-sm text-red-500 mt-1\">{errors.title.message}</p>\n          )}\n        </div>\n\n        <div>\n          <Label htmlFor=\"url\" className=\"text-sm sm:text-base\">URL</Label>\n          <Input\n            id=\"url\"\n            type=\"url\"\n            placeholder=\"https://example.com\"\n            {...register('url')}\n            className=\"mt-1 text-sm sm:text-base\"\n          />\n          {errors.url && (\n            <p className=\"text-xs sm:text-sm text-red-500 mt-1\">{errors.url.message}</p>\n          )}\n        </div>\n\n        <div>\n          <Label htmlFor=\"subject\" className=\"text-sm sm:text-base\">Subject</Label>\n          <Select onValueChange={(value) => setValue('subject', value as any)} defaultValue=\"Physics\">\n            <SelectTrigger className=\"mt-1 text-sm sm:text-base\">\n              <SelectValue placeholder=\"Select Subject\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"Physics\">Physics</SelectItem>\n              <SelectItem value=\"Chemistry\">Chemistry</SelectItem>\n              <SelectItem value=\"Mathematics\">Mathematics</SelectItem>\n              <SelectItem value=\"General\">General</SelectItem>\n            </SelectContent>\n          </Select>\n          {errors.subject && (\n            <p className=\"text-xs sm:text-sm text-red-500 mt-1\">{errors.subject.message}</p>\n          )}\n        </div>\n\n        <div>\n          <Label htmlFor=\"category\" className=\"text-sm sm:text-base\">Category</Label>\n          <Select onValueChange={(value) => setValue('category', value as any)} defaultValue=\"website\">\n            <SelectTrigger className=\"mt-1 text-sm sm:text-base\">\n              <SelectValue placeholder=\"Select Category\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"website\">Website</SelectItem>\n              <SelectItem value=\"video\">Video</SelectItem>\n              <SelectItem value=\"book\">Book</SelectItem>\n              <SelectItem value=\"document\">Document</SelectItem>\n              <SelectItem value=\"tool\">Tool</SelectItem>\n            </SelectContent>\n          </Select>\n          {errors.category && (\n            <p className=\"text-xs sm:text-sm text-red-500 mt-1\">{errors.category.message}</p>\n          )}\n        </div>\n\n        <div>\n          <Label htmlFor=\"description\" className=\"text-sm sm:text-base\">Description (Optional)</Label>\n          <Textarea\n            id=\"description\"\n            placeholder=\"Add resource description...\"\n            rows={3}\n            {...register('description')}\n            className=\"mt-1 resize-none text-sm sm:text-base\"\n          />\n          {errors.description && (\n            <p className=\"text-xs sm:text-sm text-red-500 mt-1\">{errors.description.message}</p>\n          )}\n        </div>\n\n        <div className=\"flex flex-col sm:flex-row sm:justify-end gap-2 sm:gap-3 pt-4\">\n          <Button\n            type=\"button\"\n            variant=\"outline\"\n            onClick={onClose}\n            disabled={isSubmitting}\n            className=\"w-full sm:w-auto text-sm sm:text-base\"\n          >\n            Cancel\n          </Button>\n          <Button\n            type=\"submit\"\n            disabled={isSubmitting}\n            className=\"w-full sm:w-auto bg-green-500 hover:bg-green-600 text-white text-sm sm:text-base\"\n          >\n            {isSubmitting ? 'Adding...' : 'Add Resource'}\n          </Button>\n        </div>\n      </form>\n    </SimpleModal>\n  );\n}","size_bytes":6208},"client/src/components/new-modals/simple-task-modal.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { SimpleModal } from '@/components/simple-modal';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { insertTaskSchema } from '@shared/schema';\nimport { taskStorage } from '@/lib/storage';\nimport { useToast } from '@/hooks/use-toast';\nimport type { InsertTask } from '@shared/schema';\n\ninterface SimpleTaskModalProps {\n  open: boolean;\n  onClose: () => void;\n  onTaskCreated?: () => void;\n}\n\nexport function SimpleTaskModal({ open, onClose, onTaskCreated }: SimpleTaskModalProps) {\n  const { toast } = useToast();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  \n  const {\n    register,\n    handleSubmit,\n    reset,\n    setValue,\n    watch,\n    formState: { errors }\n  } = useForm<InsertTask>({\n    resolver: zodResolver(insertTaskSchema),\n    defaultValues: {\n      title: '',\n      subject: 'Physics',\n      description: '',\n      priority: 'medium',\n      dueDate: new Date().toISOString().split('T')[0],\n    },\n  });\n\n  const priority = watch('priority');\n  const today = new Date().toISOString().split('T')[0];\n\n  const onSubmit = (data: InsertTask) => {\n    console.log('Form submitted with data:', data);\n    console.log('Form errors:', errors);\n    setIsSubmitting(true);\n    \n    // Add a delay to make sure we can see the loading state\n    setTimeout(() => {\n      try {\n        console.log('Calling taskStorage.create...');\n        const task = taskStorage.create(data);\n        console.log('Task created successfully:', task);\n        \n        toast({\n          title: 'Task Created',\n          description: `Task \"${task.title}\" has been created successfully.`,\n        });\n        \n        reset();\n        onClose();\n        onTaskCreated?.();\n      } catch (error) {\n        console.error('Error creating task:', error);\n        toast({\n          title: 'Error',\n          description: `Failed to create task: ${error instanceof Error ? error.message : 'Unknown error'}`,\n          variant: 'destructive',\n        });\n      } finally {\n        setIsSubmitting(false);\n      }\n    }, 100);\n  };\n\n  useEffect(() => {\n    if (!open) {\n      reset();\n    }\n  }, [open, reset]);\n\n  return (\n    <SimpleModal\n      open={open}\n      onClose={onClose}\n      title=\"Create New Task\"\n      className=\"max-w-sm sm:max-w-md lg:max-w-lg\"\n    >\n      <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-3 sm:space-y-4\">\n        <div>\n          <Label htmlFor=\"title\" className=\"text-sm sm:text-base\">Task Title</Label>\n          <Input\n            id=\"title\"\n            placeholder=\"Enter task title...\"\n            {...register('title')}\n            className=\"mt-1 text-sm sm:text-base\"\n          />\n          {errors.title && (\n            <p className=\"text-xs sm:text-sm text-red-500 mt-1\">{errors.title.message}</p>\n          )}\n        </div>\n\n        <div>\n          <Label htmlFor=\"subject\" className=\"text-sm sm:text-base\">Subject</Label>\n          <Select onValueChange={(value) => setValue('subject', value as any)} defaultValue=\"Physics\">\n            <SelectTrigger className=\"mt-1 text-sm sm:text-base\">\n              <SelectValue placeholder=\"Select Subject\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"Physics\">Physics</SelectItem>\n              <SelectItem value=\"Chemistry\">Chemistry</SelectItem>\n              <SelectItem value=\"Mathematics\">Mathematics</SelectItem>\n            </SelectContent>\n          </Select>\n          {errors.subject && (\n            <p className=\"text-xs sm:text-sm text-red-500 mt-1\">{errors.subject.message}</p>\n          )}\n        </div>\n\n        <div>\n          <Label htmlFor=\"description\" className=\"text-sm sm:text-base\">Description (Optional)</Label>\n          <Textarea\n            id=\"description\"\n            placeholder=\"Add task description...\"\n            rows={3}\n            {...register('description')}\n            className=\"mt-1 resize-none text-sm sm:text-base\"\n          />\n          {errors.description && (\n            <p className=\"text-xs sm:text-sm text-red-500 mt-1\">{errors.description.message}</p>\n          )}\n        </div>\n\n        <div>\n          <Label htmlFor=\"dueDate\" className=\"text-sm sm:text-base\">Due Date</Label>\n          <Input\n            id=\"dueDate\"\n            type=\"date\"\n            min={today}\n            {...register('dueDate')}\n            className=\"mt-1 text-sm sm:text-base\"\n          />\n          {errors.dueDate && (\n            <p className=\"text-xs sm:text-sm text-red-500 mt-1\">{errors.dueDate.message}</p>\n          )}\n        </div>\n\n        <div>\n          <Label className=\"text-sm sm:text-base\">Priority</Label>\n          <div className=\"flex flex-wrap gap-2 mt-1\">\n            {[\n              { value: 'low', label: 'Low', color: 'bg-green-100 text-green-800 hover:bg-green-200' },\n              { value: 'medium', label: 'Medium', color: 'bg-yellow-100 text-yellow-800 hover:bg-yellow-200' },\n              { value: 'high', label: 'High', color: 'bg-red-100 text-red-800 hover:bg-red-200' },\n            ].map((option) => (\n              <button\n                key={option.value}\n                type=\"button\"\n                onClick={() => setValue('priority', option.value as any)}\n                className={`px-2 sm:px-3 py-1 rounded-full text-xs sm:text-sm font-medium transition-colors flex-1 sm:flex-none ${\n                  priority === option.value \n                    ? option.color \n                    : 'bg-gray-100 text-gray-600 hover:bg-gray-200 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600'\n                }`}\n              >\n                {option.label}\n              </button>\n            ))}\n          </div>\n          {errors.priority && (\n            <p className=\"text-xs sm:text-sm text-red-500 mt-1\">{errors.priority.message}</p>\n          )}\n        </div>\n\n        <div className=\"flex flex-col sm:flex-row sm:justify-end gap-2 sm:gap-3 pt-4\">\n          <Button\n            type=\"button\"\n            variant=\"outline\"\n            onClick={onClose}\n            disabled={isSubmitting}\n            className=\"w-full sm:w-auto text-sm sm:text-base\"\n          >\n            Cancel\n          </Button>\n          <Button\n            type=\"submit\"\n            disabled={isSubmitting}\n            className=\"w-full sm:w-auto bg-blue-500 hover:bg-blue-600 text-white text-sm sm:text-base\"\n          >\n            {isSubmitting ? 'Creating...' : 'Create Task'}\n          </Button>\n        </div>\n      </form>\n    </SimpleModal>\n  );\n}","size_bytes":6867},"client/src/components/new-modals/simple-welcome-modal.tsx":{"content":"import { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { SimpleModal } from '@/components/simple-modal';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { GraduationCap, User } from 'lucide-react';\n\nconst userSchema = z.object({\n  name: z.string().min(1, 'Name is required').max(50, 'Name must be less than 50 characters'),\n});\n\ntype UserFormData = z.infer<typeof userSchema>;\n\ninterface SimpleWelcomeModalProps {\n  open: boolean;\n  onComplete: (name: string) => void;\n}\n\nexport function SimpleWelcomeModal({ open, onComplete }: SimpleWelcomeModalProps) {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  \n  console.log('SimpleWelcomeModal render, open:', open);\n  \n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    reset\n  } = useForm<UserFormData>({\n    resolver: zodResolver(userSchema),\n    defaultValues: {\n      name: '',\n    },\n  });\n\n  const onSubmit = async (data: UserFormData) => {\n    console.log('Welcome modal form submitted with:', data);\n    setIsSubmitting(true);\n    try {\n      console.log('Calling onComplete with name:', data.name);\n      onComplete(data.name);\n      console.log('onComplete called successfully');\n      // Reset form after successful submission\n      reset();\n    } catch (error) {\n      console.error('Error in welcome modal submission:', error);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  // Don't render if not open\n  if (!open) {\n    console.log('SimpleWelcomeModal not rendering - open is false');\n    return null;\n  }\n\n  return (\n    <div \n      className=\"fixed inset-0 z-[9999] flex items-center justify-center p-3 sm:p-4 md:p-6\"\n      style={{ \n        backgroundColor: 'rgba(0, 0, 0, 0.8)',\n        zIndex: 9999 \n      }}\n    >\n      <div \n        className=\"bg-white dark:bg-gray-800 rounded-lg shadow-xl w-full max-w-sm sm:max-w-md p-6 sm:p-8 max-h-[95vh] overflow-y-auto\"\n        style={{ zIndex: 10000 }}\n      >\n        <div className=\"text-center mb-6\">\n          <div className=\"mx-auto w-12 h-12 sm:w-16 sm:h-16 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center mb-4\">\n            <GraduationCap className=\"text-white\" size={24} />\n          </div>\n          <h2 className=\"text-xl sm:text-2xl font-bold text-gray-900 dark:text-white mb-2\">\n            Welcome to JEE Study Manager!\n          </h2>\n          <p className=\"text-sm sm:text-base text-gray-600 dark:text-gray-300\">\n            Let's personalize your study experience. What should we call you?\n          </p>\n        </div>\n        \n        <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"name\" className=\"text-sm sm:text-base\">Your Name</Label>\n            <div className=\"relative mt-1\">\n              <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={16} />\n              <Input\n                id=\"name\"\n                placeholder=\"Enter your name...\"\n                className=\"pl-10 py-2 sm:py-3 text-sm sm:text-base\"\n                {...register('name')}\n              />\n            </div>\n            {errors.name && (\n              <p className=\"text-xs sm:text-sm text-red-500 mt-1\">{errors.name.message}</p>\n            )}\n          </div>\n          \n          <Button\n            type=\"submit\"\n            disabled={isSubmitting}\n            className=\"w-full bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 text-white py-2 sm:py-3 font-semibold text-sm sm:text-base\"\n          >\n            {isSubmitting ? 'Getting Started...' : 'Get Started'}\n          </Button>\n        </form>\n        \n        <p className=\"text-center text-xs text-gray-500 mt-4\">\n          Your information is stored locally and never shared.\n        </p>\n      </div>\n    </div>\n  );\n}","size_bytes":4033},"client/src/components/demo/popup-demo.tsx":{"content":"import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { SimpleModal } from '@/components/simple-modal';\nimport { Dialog, DialogTrigger, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog';\nimport { AlertDialog, AlertDialogTrigger, AlertDialogContent, AlertDialogHeader, AlertDialogTitle, AlertDialogDescription, AlertDialogFooter, AlertDialogCancel, AlertDialogAction } from '@/components/ui/alert-dialog';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { ScrollArea } from '@/components/ui/scroll-area';\n\nexport function PopupDemo() {\n  const [simpleModalOpen, setSimpleModalOpen] = useState(false);\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [scrollableModalOpen, setScrollableModalOpen] = useState(false);\n  const [largeModalOpen, setLargeModalOpen] = useState(false);\n\n  // Generate long content for scrolling demonstration\n  const longContent = Array.from({ length: 50 }, (_, i) => (\n    <Card key={i} className=\"mb-4\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center justify-between\">\n          Item {i + 1}\n          <Badge variant=\"secondary\">Demo</Badge>\n        </CardTitle>\n        <CardDescription>\n          This is a demo card item to showcase the scrollable popup functionality.\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <p className=\"text-sm text-muted-foreground\">\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor \n          incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis \n          nostrud exercitation ullamco laboris.\n        </p>\n      </CardContent>\n    </Card>\n  ));\n\n  return (\n    <div className=\"min-h-screen bg-background p-6\">\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-3xl font-bold text-foreground mb-4\">\n            Enhanced Popup Demo\n          </h1>\n          <p className=\"text-muted-foreground\">\n            Responsive popups with beautiful scrollbars and adaptive height\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {/* Simple Modal Demo */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Simple Modal</CardTitle>\n              <CardDescription>Basic modal with enhanced scrollbar</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Button \n                onClick={() => setSimpleModalOpen(true)}\n                className=\"w-full\"\n                data-testid=\"button-open-simple-modal\"\n              >\n                Open Simple Modal\n              </Button>\n            </CardContent>\n          </Card>\n\n          {/* Dialog Component Demo */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Dialog Component</CardTitle>\n              <CardDescription>Radix UI dialog with responsive sizing</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>\n                <DialogTrigger asChild>\n                  <Button className=\"w-full\" data-testid=\"button-open-dialog\">\n                    Open Dialog\n                  </Button>\n                </DialogTrigger>\n                <DialogContent size=\"md\">\n                  <DialogHeader>\n                    <DialogTitle>Enhanced Dialog</DialogTitle>\n                    <DialogDescription>\n                      This dialog demonstrates the enhanced responsive design.\n                    </DialogDescription>\n                  </DialogHeader>\n                  <div className=\"space-y-4\">\n                    <p>This is a standard dialog with responsive height and width.</p>\n                    <p>The dialog automatically adapts to different screen sizes:</p>\n                    <ul className=\"list-disc list-inside space-y-1 text-sm\">\n                      <li>Mobile: 95vh max height</li>\n                      <li>Tablet: 85vh max height</li>\n                      <li>Desktop: 80vh max height</li>\n                    </ul>\n                  </div>\n                </DialogContent>\n              </Dialog>\n            </CardContent>\n          </Card>\n\n          {/* Scrollable Modal Demo */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Scrollable Content</CardTitle>\n              <CardDescription>Modal with lots of content to demonstrate scrolling</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Button \n                onClick={() => setScrollableModalOpen(true)}\n                className=\"w-full\"\n                data-testid=\"button-open-scrollable-modal\"\n              >\n                Open Scrollable Modal\n              </Button>\n            </CardContent>\n          </Card>\n\n          {/* Large Modal Demo */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Large Modal</CardTitle>\n              <CardDescription>Extra large modal with enhanced scrollbar</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Button \n                onClick={() => setLargeModalOpen(true)}\n                className=\"w-full\"\n                data-testid=\"button-open-large-modal\"\n              >\n                Open Large Modal\n              </Button>\n            </CardContent>\n          </Card>\n\n          {/* Alert Dialog Demo */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Alert Dialog</CardTitle>\n              <CardDescription>Confirmation dialog with responsive design</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <AlertDialog>\n                <AlertDialogTrigger asChild>\n                  <Button variant=\"destructive\" className=\"w-full\" data-testid=\"button-open-alert\">\n                    Open Alert\n                  </Button>\n                </AlertDialogTrigger>\n                <AlertDialogContent>\n                  <AlertDialogHeader>\n                    <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>\n                    <AlertDialogDescription>\n                      This action cannot be undone. This will permanently delete your\n                      account and remove your data from our servers.\n                    </AlertDialogDescription>\n                  </AlertDialogHeader>\n                  <AlertDialogFooter>\n                    <AlertDialogCancel>Cancel</AlertDialogCancel>\n                    <AlertDialogAction>Continue</AlertDialogAction>\n                  </AlertDialogFooter>\n                </AlertDialogContent>\n              </AlertDialog>\n            </CardContent>\n          </Card>\n\n          {/* Responsive Info */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Responsive Features</CardTitle>\n              <CardDescription>What's included in the enhanced popups</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2\">\n                <Badge variant=\"outline\">Custom Scrollbars</Badge>\n                <Badge variant=\"outline\">Responsive Height</Badge>\n                <Badge variant=\"outline\">Adaptive Sizing</Badge>\n                <Badge variant=\"outline\">Dark Mode Support</Badge>\n                <Badge variant=\"outline\">Mobile Optimized</Badge>\n                <Badge variant=\"outline\">Smooth Animations</Badge>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Simple Modal */}\n        <SimpleModal\n          open={simpleModalOpen}\n          onClose={() => setSimpleModalOpen(false)}\n          title=\"Enhanced Simple Modal\"\n          size=\"md\"\n          scrollable={true}\n        >\n          <div className=\"space-y-4\">\n            <p>This is a simple modal with enhanced features:</p>\n            <ul className=\"list-disc list-inside space-y-1\">\n              <li>Beautiful custom scrollbar with gradients</li>\n              <li>Responsive height that adapts to screen size</li>\n              <li>Smooth hover effects on scrollbar</li>\n              <li>Dark mode support</li>\n            </ul>\n            <div className=\"bg-gray-100 dark:bg-gray-800 p-4 rounded-lg\">\n              <p className=\"text-sm\">Try scrolling to see the enhanced scrollbar in action!</p>\n            </div>\n            {/* Add some content to make it scrollable */}\n            {Array.from({ length: 10 }, (_, i) => (\n              <div key={i} className=\"p-3 border rounded-lg\">\n                <h4 className=\"font-medium\">Feature {i + 1}</h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  This demonstrates the scrollable content with our enhanced scrollbar design.\n                </p>\n              </div>\n            ))}\n          </div>\n        </SimpleModal>\n\n        {/* Scrollable Modal with lots of content */}\n        <SimpleModal\n          open={scrollableModalOpen}\n          onClose={() => setScrollableModalOpen(false)}\n          title=\"Scrollable Content Demo\"\n          size=\"lg\"\n          scrollable={true}\n        >\n          <div className=\"space-y-4\">\n            <p className=\"text-center text-muted-foreground mb-6\">\n              This modal contains a lot of content to demonstrate the scrolling functionality.\n              Notice the beautiful gradient scrollbar on the right side.\n            </p>\n            {longContent}\n          </div>\n        </SimpleModal>\n\n        {/* Large Modal */}\n        <SimpleModal\n          open={largeModalOpen}\n          onClose={() => setLargeModalOpen(false)}\n          title=\"Large Modal with Enhanced Features\"\n          size=\"xl\"\n          scrollable={true}\n        >\n          <div className=\"space-y-6\">\n            <div className=\"text-center\">\n              <h3 className=\"text-xl font-semibold mb-4\">Extra Large Modal</h3>\n              <p className=\"text-muted-foreground\">\n                This modal demonstrates the XL size with all responsive features enabled.\n              </p>\n            </div>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-4\">\n                <h4 className=\"font-medium\">Scrollbar Features:</h4>\n                <ul className=\"space-y-2 text-sm\">\n                  <li>• Gradient background</li>\n                  <li>• Hover effects with scaling</li>\n                  <li>• Smooth transitions</li>\n                  <li>• Dark mode compatibility</li>\n                  <li>• Responsive width</li>\n                </ul>\n              </div>\n              \n              <div className=\"space-y-4\">\n                <h4 className=\"font-medium\">Responsive Height:</h4>\n                <ul className=\"space-y-2 text-sm\">\n                  <li>• Mobile: 95vh maximum</li>\n                  <li>• Tablet: 85vh maximum</li>\n                  <li>• Desktop: 80vh maximum</li>\n                  <li>• Minimum height constraints</li>\n                  <li>• Adaptive padding</li>\n                </ul>\n              </div>\n            </div>\n\n            {/* Add scrollable content */}\n            {Array.from({ length: 20 }, (_, i) => (\n              <Card key={i}>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">Content Block {i + 1}</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-sm text-muted-foreground\">\n                    This is additional content to demonstrate the scrolling behavior. \n                    The scrollbar should appear automatically when content exceeds the \n                    modal height.\n                  </p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </SimpleModal>\n      </div>\n    </div>\n  );\n}","size_bytes":11943},"client/src/pages/schedule.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Badge } from '@/components/ui/badge';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { SimpleModal } from '@/components/simple-modal';\nimport { Calendar as CalendarIcon, Clock, Plus, Edit2, Trash2, BookOpen } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface ScheduleItem {\n  id: string;\n  title: string;\n  subject: 'Physics' | 'Chemistry' | 'Mathematics';\n  startTime: string;\n  endTime: string;\n  day: 'Monday' | 'Tuesday' | 'Wednesday' | 'Thursday' | 'Friday' | 'Saturday' | 'Sunday';\n  description?: string;\n  type: 'study' | 'revision' | 'practice' | 'break';\n}\n\nconst DAYS = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'] as const;\nconst SUBJECTS = ['Physics', 'Chemistry', 'Mathematics'] as const;\nconst TYPES = [\n  { value: 'study', label: 'Study Session', color: 'bg-blue-500' },\n  { value: 'revision', label: 'Revision', color: 'bg-green-500' },\n  { value: 'practice', label: 'Practice', color: 'bg-orange-500' },\n  { value: 'break', label: 'Break', color: 'bg-gray-500' }\n] as const;\n\nconst STORAGE_KEY = 'jee-schedule-items';\n\nexport default function Schedule() {\n  const [scheduleItems, setScheduleItems] = useState<ScheduleItem[]>([]);\n  const [selectedDay, setSelectedDay] = useState<string>('Monday');\n  const [isAddModalOpen, setIsAddModalOpen] = useState(false);\n  const [editingItem, setEditingItem] = useState<ScheduleItem | null>(null);\n  const [formData, setFormData] = useState({\n    title: '',\n    subject: 'Physics' as ScheduleItem['subject'],\n    startTime: '',\n    endTime: '',\n    day: 'Monday' as ScheduleItem['day'],\n    description: '',\n    type: 'study' as ScheduleItem['type']\n  });\n  const { toast } = useToast();\n\n  // Load schedule items from localStorage\n  useEffect(() => {\n    const saved = localStorage.getItem(STORAGE_KEY);\n    if (saved) {\n      try {\n        setScheduleItems(JSON.parse(saved));\n      } catch (error) {\n        console.error('Error loading schedule:', error);\n      }\n    }\n  }, []);\n\n  // Save schedule items to localStorage\n  const saveSchedule = (items: ScheduleItem[]) => {\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(items));\n    setScheduleItems(items);\n  };\n\n  const resetForm = () => {\n    setFormData({\n      title: '',\n      subject: 'Physics',\n      startTime: '',\n      endTime: '',\n      day: selectedDay as ScheduleItem['day'],\n      description: '',\n      type: 'study'\n    });\n    setEditingItem(null);\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    console.log('Form submitted with data:', formData);\n    \n    if (!formData.title || !formData.startTime || !formData.endTime) {\n      console.log('Validation failed - missing fields');\n      toast({\n        title: \"Missing Information\",\n        description: \"Please fill in all required fields.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (formData.startTime >= formData.endTime) {\n      toast({\n        title: \"Invalid Time\",\n        description: \"End time must be after start time.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const newItem: ScheduleItem = {\n      id: editingItem?.id || Date.now().toString(),\n      ...formData\n    };\n\n    let updatedItems;\n    if (editingItem) {\n      updatedItems = scheduleItems.map(item => \n        item.id === editingItem.id ? newItem : item\n      );\n      toast({\n        title: \"Schedule Updated\",\n        description: \"Your schedule item has been updated successfully.\",\n      });\n    } else {\n      updatedItems = [...scheduleItems, newItem];\n      toast({\n        title: \"Schedule Added\",\n        description: \"New schedule item has been added successfully.\",\n      });\n    }\n\n    saveSchedule(updatedItems);\n    setIsAddModalOpen(false);\n    resetForm();\n  };\n\n  const handleEdit = (item: ScheduleItem) => {\n    setEditingItem(item);\n    setFormData({\n      ...item,\n      description: item.description || ''\n    });\n    setIsAddModalOpen(true);\n  };\n\n  const handleDelete = (id: string) => {\n    const updatedItems = scheduleItems.filter(item => item.id !== id);\n    saveSchedule(updatedItems);\n    toast({\n      title: \"Schedule Deleted\",\n      description: \"Schedule item has been removed.\",\n    });\n  };\n\n  const getDaySchedule = (day: string) => {\n    return scheduleItems\n      .filter(item => item.day === day)\n      .sort((a, b) => a.startTime.localeCompare(b.startTime));\n  };\n\n  const getSubjectColor = (subject: string) => {\n    switch (subject) {\n      case 'Physics': return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200';\n      case 'Chemistry': return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200';\n      case 'Mathematics': return 'bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200';\n      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200';\n    }\n  };\n\n  const getTypeInfo = (type: string) => {\n    return TYPES.find(t => t.value === type) || TYPES[0];\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground\">Study Schedule</h1>\n          <p className=\"text-muted-foreground\">Plan and organize your JEE preparation schedule</p>\n        </div>\n        \n        <Button \n          onClick={() => {\n            console.log('Add Schedule button clicked');\n            resetForm();\n            setIsAddModalOpen(true);\n            console.log('Modal should open, isAddModalOpen:', true);\n          }}\n          className=\"flex items-center gap-2\"\n          data-testid=\"button-add-schedule\"\n        >\n          <Plus size={16} />\n          Add Schedule\n        </Button>\n        \n        <SimpleModal\n          open={isAddModalOpen}\n          onClose={() => {\n            setIsAddModalOpen(false);\n            resetForm();\n          }}\n          title={editingItem ? 'Edit Schedule' : 'Add New Schedule'}\n          size=\"md\"\n        >\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"title\">Title *</Label>\n                <Input\n                  id=\"title\"\n                  value={formData.title}\n                  onChange={(e) => setFormData({...formData, title: e.target.value})}\n                  placeholder=\"e.g., Mechanics Chapter\"\n                  required\n                  data-testid=\"input-schedule-title\"\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"subject\">Subject</Label>\n                  <Select value={formData.subject} onValueChange={(value) => setFormData({...formData, subject: value as ScheduleItem['subject']})}>\n                    <SelectTrigger data-testid=\"select-subject\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {SUBJECTS.map(subject => (\n                        <SelectItem key={subject} value={subject}>{subject}</SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"type\">Type</Label>\n                  <Select value={formData.type} onValueChange={(value) => setFormData({...formData, type: value as ScheduleItem['type']})}>\n                    <SelectTrigger data-testid=\"select-type\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {TYPES.map(type => (\n                        <SelectItem key={type.value} value={type.value}>{type.label}</SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"day\">Day</Label>\n                <Select value={formData.day} onValueChange={(value) => setFormData({...formData, day: value as ScheduleItem['day']})}>\n                  <SelectTrigger data-testid=\"select-day\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {DAYS.map(day => (\n                      <SelectItem key={day} value={day}>{day}</SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"startTime\">Start Time *</Label>\n                  <Input\n                    id=\"startTime\"\n                    type=\"time\"\n                    value={formData.startTime}\n                    onChange={(e) => setFormData({...formData, startTime: e.target.value})}\n                    required\n                    data-testid=\"input-start-time\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"endTime\">End Time *</Label>\n                  <Input\n                    id=\"endTime\"\n                    type=\"time\"\n                    value={formData.endTime}\n                    onChange={(e) => setFormData({...formData, endTime: e.target.value})}\n                    required\n                    data-testid=\"input-end-time\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"description\">Description</Label>\n                <Textarea\n                  id=\"description\"\n                  value={formData.description}\n                  onChange={(e) => setFormData({...formData, description: e.target.value})}\n                  placeholder=\"Additional notes or topics to cover...\"\n                  rows={3}\n                  data-testid=\"textarea-description\"\n                />\n              </div>\n\n              <div className=\"flex gap-3 pt-4\">\n                <Button type=\"submit\" className=\"flex-1\" data-testid=\"button-save-schedule\">\n                  {editingItem ? 'Update' : 'Add'} Schedule\n                </Button>\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => {\n                    setIsAddModalOpen(false);\n                    resetForm();\n                  }}\n                  data-testid=\"button-cancel-schedule\"\n                >\n                  Cancel\n                </Button>\n              </div>\n            </form>\n        </SimpleModal>\n      </div>\n\n      {/* Day Tabs */}\n      <div className=\"flex flex-wrap gap-2\">\n        {DAYS.map(day => {\n          const dayItems = getDaySchedule(day);\n          return (\n            <Button\n              key={day}\n              variant={selectedDay === day ? \"default\" : \"outline\"}\n              onClick={() => setSelectedDay(day)}\n              className=\"flex items-center gap-2\"\n              data-testid={`tab-${day.toLowerCase()}`}\n            >\n              <CalendarIcon size={16} />\n              {day}\n              {dayItems.length > 0 && (\n                <Badge variant=\"secondary\" className=\"ml-1 text-xs\">\n                  {dayItems.length}\n                </Badge>\n              )}\n            </Button>\n          );\n        })}\n      </div>\n\n      {/* Schedule for Selected Day */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <CalendarIcon size={20} />\n            {selectedDay} Schedule\n          </CardTitle>\n          <CardDescription>\n            {getDaySchedule(selectedDay).length} scheduled items\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {getDaySchedule(selectedDay).length === 0 ? (\n            <div className=\"text-center py-8\">\n              <CalendarIcon size={48} className=\"mx-auto text-gray-400 mb-4\" />\n              <p className=\"text-muted-foreground\">No schedule items for {selectedDay}</p>\n              <Button \n                variant=\"outline\" \n                className=\"mt-4\"\n                onClick={() => {\n                  setFormData({...formData, day: selectedDay as ScheduleItem['day']});\n                  setIsAddModalOpen(true);\n                }}\n                data-testid=\"button-add-first-schedule\"\n              >\n                Add First Item\n              </Button>\n            </div>\n          ) : (\n            <div className=\"space-y-3\">\n              {getDaySchedule(selectedDay).map(item => {\n                const typeInfo = getTypeInfo(item.type);\n                return (\n                  <div\n                    key={item.id}\n                    className=\"flex items-center justify-between p-4 border rounded-lg hover:bg-muted/50 transition-colors\"\n                  >\n                    <div className=\"flex items-start gap-4 flex-1\">\n                      <div className={`w-1 h-16 rounded-full ${typeInfo.color}`} />\n                      \n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-2 mb-1\">\n                          <h3 className=\"font-medium text-foreground\">{item.title}</h3>\n                          <Badge className={getSubjectColor(item.subject)} variant=\"secondary\">\n                            {item.subject}\n                          </Badge>\n                          <Badge variant=\"outline\">\n                            {typeInfo.label}\n                          </Badge>\n                        </div>\n                        \n                        <div className=\"flex items-center gap-4 text-sm text-muted-foreground mb-2\">\n                          <div className=\"flex items-center gap-1\">\n                            <Clock size={14} />\n                            {item.startTime} - {item.endTime}\n                          </div>\n                        </div>\n                        \n                        {item.description && (\n                          <p className=\"text-sm text-muted-foreground\">{item.description}</p>\n                        )}\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-center gap-2\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => handleEdit(item)}\n                        data-testid={`button-edit-${item.id}`}\n                      >\n                        <Edit2 size={16} />\n                      </Button>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => handleDelete(item.id)}\n                        data-testid={`button-delete-${item.id}`}\n                      >\n                        <Trash2 size={16} />\n                      </Button>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Weekly Overview */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <BookOpen size={20} />\n            Weekly Overview\n          </CardTitle>\n          <CardDescription>\n            Your complete week schedule at a glance\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {DAYS.map(day => {\n              const dayItems = getDaySchedule(day);\n              return (\n                <div key={day} className=\"border rounded-lg p-4\">\n                  <h4 className=\"font-medium mb-3 flex items-center justify-between\">\n                    {day}\n                    <Badge variant=\"outline\">{dayItems.length} items</Badge>\n                  </h4>\n                  \n                  {dayItems.length === 0 ? (\n                    <p className=\"text-sm text-muted-foreground\">No schedule</p>\n                  ) : (\n                    <div className=\"space-y-2\">\n                      {dayItems.slice(0, 3).map(item => (\n                        <div key={item.id} className=\"text-sm\">\n                          <div className=\"font-medium\">{item.title}</div>\n                          <div className=\"text-muted-foreground\">\n                            {item.startTime} - {item.endTime}\n                          </div>\n                        </div>\n                      ))}\n                      {dayItems.length > 3 && (\n                        <p className=\"text-xs text-muted-foreground\">\n                          +{dayItems.length - 3} more items\n                        </p>\n                      )}\n                    </div>\n                  )}\n                </div>\n              );\n            })}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":17327},"client/src/components/new-modals/settings-modal.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { SimpleModal } from '@/components/simple-modal';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { useToast } from '@/hooks/use-toast';\nimport { useTheme } from '@/components/theme-provider';\nimport { userProfileStorage } from '@/lib/storage';\nimport { User, Save } from 'lucide-react';\nimport type { UserProfile } from '@/lib/storage';\n\ninterface SettingsModalProps {\n  open: boolean;\n  onClose: () => void;\n}\n\nexport function SettingsModal({ open, onClose }: SettingsModalProps) {\n  const { theme, setTheme } = useTheme();\n  const { toast } = useToast();\n  const [userProfile, setUserProfile] = useState<UserProfile | null>(null);\n  const [formData, setFormData] = useState({\n    name: '',\n  });\n\n  useEffect(() => {\n    if (open) {\n      const profile = userProfileStorage.get();\n      if (profile) {\n        setUserProfile(profile);\n        setFormData({\n          name: profile.name || '',\n        });\n      }\n    }\n  }, [open]);\n\n  const handleSaveSettings = () => {\n    if (!formData.name.trim()) {\n      toast({\n        title: 'Error',\n        description: 'Please enter your name.',\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    const updatedProfile = userProfileStorage.update({\n      name: formData.name.trim(),\n      preferences: {\n        defaultSubject: userProfile?.preferences?.defaultSubject || 'Physics',\n        defaultTimerDuration: userProfile?.preferences?.defaultTimerDuration || 25,\n        theme: theme === 'system' ? 'light' : theme,\n      },\n    });\n\n    if (updatedProfile) {\n      toast({\n        title: 'Settings Saved',\n        description: 'Your name has been updated successfully.',\n      });\n      onClose();\n    } else {\n      toast({\n        title: 'Error',\n        description: 'Failed to save settings. Please try again.',\n        variant: 'destructive',\n      });\n    }\n  };\n\n\n  return (\n    <SimpleModal\n      open={open}\n      onClose={onClose}\n      title=\"App Settings\"\n      size=\"md\"\n    >\n      <div className=\"space-y-6\">\n        {/* User Profile Section */}\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center gap-2\">\n            <User size={18} className=\"text-primary\" />\n            <h3 className=\"text-lg font-semibold\">Profile</h3>\n          </div>\n          <div>\n            <Label htmlFor=\"name\">Your Name</Label>\n            <Input\n              id=\"name\"\n              value={formData.name}\n              onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n              placeholder=\"Enter your name\"\n              className=\"mt-1\"\n              data-testid=\"input-settings-name\"\n            />\n          </div>\n        </div>\n\n\n        {/* Action Buttons */}\n        <div className=\"flex flex-col sm:flex-row gap-3 pt-4\">\n          <Button\n            variant=\"outline\"\n            onClick={onClose}\n            className=\"w-full sm:w-auto\"\n            data-testid=\"button-settings-cancel\"\n          >\n            Cancel\n          </Button>\n          <Button\n            onClick={handleSaveSettings}\n            className=\"w-full sm:w-auto bg-primary text-primary-foreground\"\n            data-testid=\"button-settings-save\"\n          >\n            <Save size={16} className=\"mr-2\" />\n            Save Settings\n          </Button>\n        </div>\n      </div>\n    </SimpleModal>\n  );\n}","size_bytes":3462}},"version":1}